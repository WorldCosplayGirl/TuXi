
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>制图输出页面</title>

    <!--兼容IE10及以下-->
    <!--[if lte IE 10]>
        <style>
            .mic-col-ipt{
                padding-top:8px !important;
            }
        </style>
    <![endif]-->
</head>
<body>
    <div id="ajax-loader" style="cursor: progress; position: fixed; top: -50%; left: -50%; width: 200%; height: 200%; background: #fff; z-index: 10000; overflow: hidden;">
        <img src="/Content/images/ajax-loader.gif" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto;" />
    </div>
    <div id="loading_background" class="loading_background" style="display: none;"></div>
    <div id="loading_manage">
        正在拼了命为您加载…
    </div>
    <link href="/Content/styles/base.css?v=YxpeSwCdMmfHSHsA9X3_uYIlHGhZpy88-2nvGUA96sI1" rel="stylesheet" />

    @*<script src="/Content/scripts/base.js?v=X6mJY1ABXSnFG3-qFGfd9OK0FG1fYqFO5ASZyfu8szI1"></script>*@



    <link href="/Content/scripts/plugins/jquery-range/jquery.range.css" rel="stylesheet" />
    <div class="ui-layout" id="layout" style="height: 100%; width: 100%;">
        <div class="ui-layout-west">
            <div class="west-Panel" style="height:98%;width:auto;min-width: 275px;">
                <ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="active"><a href="#catalog-data" aria-controls="catalog-data" role="tab" data-toggle="tab" style="color:#666;font-weight:bold;">资源目录</a></li>
                    <li role="presentation"><a href="#drawing-output" aria-controls="drawing-output" role="tab" data-toggle="tab" style="color:#666;font-weight:bold;">制图输出</a></li>
                </ul>
                <div class="tab-content">
                    <div role="tabpanel" class="tab-pane panel-body active" id="catalog-data">
                        <div class="tallSearch">
                            <div class="input-group">
                                <input type="text" class="form-control" id="search-input" placeholder="请搜索..." />
                                <div class="input-group-btn"><span class="btn btn-primary" id="query_btn">查询</span></div>
                            </div>
                            <div class="relate_wrap">
                                <button class="btn btn-primary" id="map_link">

                                    <img src="/Content/images/%e5%8f%96%e6%b6%88%e5%85%b3%e8%81%94.png" title="地图联动关闭中" />
                                </button>
                            </div>
                        </div>
                        <div class="search-term" style="margin:5px 0;">
                            <button class="btn btn-primary" data-toggle="collapse" data-target="#districts_ctls" aria-expanded="false" aria-controls="districts_ctls" style="width:100%;">
                                查询条件
                                <span class="fa fa-plus"></span>
                            </button>
                            <div class="collapse" id="districts_ctls">
                                <div id="districtsCtls"></div>
                                <div class="btn_group" style="display:flex;margin:5px 0;">
                                    <div class="btn_group_item" style="flex:1;padding-right:2px;"><button class="btn btn-primary" id="reset_query" style="width:100%;">重置</button></div>
                                    <div class="btn_group_item" style="flex:1;padding-left:2px;"><button class="btn btn-primary" id="advanced_query" style="width:100%;">高级查询</button></div>
                                </div>
                            </div>
                        </div>
                        <div class="ztree-wrap" style="overflow:auto;">
                            <ul id="layerTree" class="ztree"></ul>
                        </div>
                    </div>
                    <div role="tabpanel" class="tab-pane panel-body" id="drawing-output">
                        <div class="disaster-search-attr">
                            <div class="z-title">制图名称<span style="color:red;">*</span></div>
                            <div class="z-wrap"><input type="text" class="form-control" id="drawing_name" style="width:100%;" /></div>
                        </div>
                        <div class="disaster-search-attr">
                            <div class="z-title">比例尺：</div>
                            <div class="z-wrap">
                                <div id="SCtype" type="select" class="ui-select"></div>
                            </div>
                        </div>
                        <div class="btn-group action-btn" style="width:100%;">
                            <button class="btn btn-primary btn-clear" title="清除选框"><i class="fa fa-trash"></i>&nbsp;清除选框</button>

                        </div>
                        <div class="area-check-wrap">
                            <input type="checkbox" id="area-check" checked="checked" />
                            <label for="area-check">地理范围</label>
                        </div>
                        <div class="box-area-wrap">
                            <table class="box-area" style="width:100%;min-width:240px;">
                                <tbody>
                                    <tr>
                                        <td colspan="2" style="text-align:center;"><input type="text" class="choose-ipt form-control" id="latitude_N" value="0" /></td>
                                    </tr>
                                    <tr>
                                        <td><input type="text" class="choose-ipt form-control" id="longitude_W" value="0" /></td>
                                        <td><input type="text" class="choose-ipt form-control" id="longitude_E" value="0" /></td>
                                    </tr>
                                    <tr>
                                        <td colspan="2" style="text-align:center;"><input type="text" class="choose-ipt form-control" id="latitude_S" value="0" /></td>
                                    </tr>
                                </tbody>
                            </table>
                            <div class="btn-group" style="margin-top:10px;width:100%;min-width:240px;">
                                <button class="btn btn-primary" id="kuangxuan" style="float:right;" title="功能提示：在图上拉框选择出图范围"><i class="fa fa-square-o"></i>&nbsp;框选</button>
                            </div>
                        </div>
                        <div class="area-check-wrap">
                            <input type="checkbox" id="formart-check" />
                            <label for="formart-check">标准图幅</label>
                        </div>
                        <div class="formart-wrap meng">
                            <table class="formart-area" style="width:100%;min-width:240px;">
                                <tbody>
                                    <tr>
                                        <td>
                                            <div style="width:100%;display:flex;overflow:hidden;">
                                                <div style="flex:2.5;line-height: 36px;text-align: right;padding-right: 2%;">经度：</div>
                                                <div style="flex:4;"><input type="text" class="choose-ipt form-control" id="f_longitude" disabled="disabled" /></div>
                                                <div style="flex:3.5;line-height: 36px;text-align: center;">
                                                    <button class="btn btn-primary" id="get_coord" onclick="getClickCoord()" style="width:65px;" disabled="disabled">拾取点</button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div style="width:100%;display:flex;overflow:hidden;">
                                                <div style="flex:2.5;line-height: 36px;text-align: right;padding-right: 2%;">纬度：</div>
                                                <div style="flex:4;"><input type="text" class="choose-ipt form-control" id="f_latitude" disabled="disabled" /></div>
                                                <div style="flex:3.5;line-height: 36px;text-align: center;">
                                                    <button class="btn btn-primary" onclick="calculateFormart()" style="width:65px;" disabled="disabled">计算</button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div style="width:100%;display:flex;overflow:hidden;">
                                                <div style="flex:2.5;line-height: 36px;text-align: right;padding-right: 2%;">图幅号：</div>
                                                <div style="flex:6;"><input type="text" class="choose-ipt form-control" id="formart_num" disabled="disabled" style="width:95%;" /></div>
                                                <div class="btn_group" style="flex:1.5;margin:4px 0;position:relative;">
                                                    <button class="btn btn-primary caret-up" onclick="changeArea(1)" disabled="disabled"><i class="fa fa-caret-up"></i></button>
                                                    <button class="btn btn-primary caret-left" onclick="changeArea(4)" disabled="disabled"><i class="fa fa-caret-left"></i></button>
                                                    <button class="btn btn-primary caret-right" onclick="changeArea(2)" disabled="disabled"><i class="fa fa-caret-right"></i></button>
                                                    <button class="btn btn-primary caret-down" onclick="changeArea(3)" disabled="disabled"><i class="fa fa-caret-down"></i></button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <table class="btn-group-table">
                            <tr>
                                <td><button class="btn btn-primary" onclick="setChutuData()">出图数据</button></td>
                                <td style="padding:0 5px;"><button class="btn btn-primary" onclick="setZhituData()">详细制图参数</button></td>
                                <td><button class="btn btn-primary" onclick="getHistoryList()">历史列表</button></td>
                            </tr>
                        </table>
                        <div class="submit-wrap">
                            <button class="btn btn-default">取消</button>
                            <button class="btn btn-primary" id="submit_form">提交</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="ui-layout-center" id="ui_center">
            <div class="center-Panel">
                <div class="panel-Title">地图</div>
                <div id="mapControl"></div>
            </div>
        </div>
    </div>
    <style>
                .ui-layout-center {
                    overflow-x: hidden !important;
                }

                .ui-layout-resizer {
                    background-color: #f0f3f4 !important;
                }

                .ui-layout .west-Panel {
                    padding: 0;
                }

                .ui-layout .ui-layout-west {
                    overflow: initial !important;
                }

                .west-Panel .nav-tabs {
                    padding: 0;
                    /*min-width:273px;*/
                    width: 100%;
                }

                .west-Panel .tab-content {
                    /*overflow: auto;*/
                    height: 98%;
                }

                .panel-body {
                    padding: 10px 10px 0;
                }

                    .panel-body .disaster-search-attr {
                        padding: 10px 0;
                        position: relative;
                    }

                        .panel-body .disaster-search-attr .z-title {
                            line-height: 30px;
                            width: 70px;
                            position: absolute;
                        }

                        .panel-body .disaster-search-attr .z-wrap {
                            width: 100%;
                            min-width: 240px;
                            padding-left: 70px;
                        }

                    .panel-body .btn-group.action-btn {
                        display: flex;
                        padding: 10px 0;
                        border-bottom: 1px solid #ededed;
                    }

                        .panel-body .btn-group.action-btn > .btn {
                            padding: 6px;
                        }

                        .panel-body .btn-group.action-btn > .btn-clear {
                            flex: 2;
                            /*min-width: 80px;*/
                            min-width: 240px;
                        }

                        .panel-body .btn-group.action-btn > .btn-location {
                            flex: 1;
                            min-width: 50px;
                        }

                        .panel-body .btn-group.action-btn > .btn-scale {
                            flex: 3;
                            min-width: 110px;
                        }

                    .panel-body .area-check-wrap {
                        margin: 3px 0;
                    }

                    .panel-body .box-area-wrap {
                        padding: 10px 0;
                        border-bottom: 1px solid #ededed;
                    }

                        .panel-body .box-area-wrap .box-area tr td {
                            text-align: center;
                        }

                            .panel-body .box-area-wrap .box-area tr td input {
                                width: 100px;
                                text-align: center;
                                margin: 5px auto;
                                padding: 0;
                            }

                    .panel-body .btn-group-table {
                        margin: 10px 0;
                        width: 100%;
                        min-width: 240px;
                    }

                        .panel-body .btn-group-table .btn {
                            padding: 6px;
                            width: 100%;
                        }

                    .panel-body .submit-wrap {
                        text-align: right;
                        min-width: 240px;
                        margin-top: 20px;
                    }

                        .panel-body .submit-wrap .btn {
                            min-width: 80px;
                        }

                    .panel-body .formart-wrap {
                        padding: 10px 0;
                        border-bottom: 1px solid #ededed;
                    }

                        .panel-body .formart-wrap .sxzy1 {
                            border: 5px solid transparent;
                            width: 5px;
                            cursor: pointer;
                        }

                        .panel-body .formart-wrap .sxzy_s {
                            border-bottom-color: #fff;
                            margin: 0 auto;
                        }

                        .panel-body .formart-wrap .sxzy_z {
                            float: left;
                            border-right-color: #fff;
                        }

                        .panel-body .formart-wrap .sxzy_y {
                            float: right;
                            border-left-color: #fff;
                        }

                        .panel-body .formart-wrap .sxzy_x {
                            margin: 0 auto;
                            border-top-color: #fff;
                        }

                        .panel-body .formart-wrap .sxzy_s:hover {
                            border-bottom-color: #000;
                        }

                        .panel-body .formart-wrap .sxzy_z:hover {
                            border-right-color: #000;
                        }

                        .panel-body .formart-wrap .sxzy_y:hover {
                            border-left-color: #000;
                        }

                        .panel-body .formart-wrap .sxzy_x:hover {
                            border-top-color: #000;
                        }

                        .panel-body .formart-wrap .formart-area input {
                            width: 100%;
                            margin: 5px 0;
                            padding: 0;
                        }

                        .panel-body .formart-wrap .formart-area .btn_group .btn {
                            height: 10px;
                            padding: 0;
                            text-align: center;
                            line-height: 5px;
                            position: absolute;
                            border: none;
                        }

                            .panel-body .formart-wrap .formart-area .btn_group .btn.caret-up {
                                /*width:36px;*/
                                width: 100%;
                                border-radius: 4px 4px 0 0;
                            }

                            .panel-body .formart-wrap .formart-area .btn_group .btn.caret-left {
                                /*width:18px;*/
                                width: 50%;
                                border-radius: 0;
                                top: 10px;
                                left: 0;
                            }

                            .panel-body .formart-wrap .formart-area .btn_group .btn.caret-right {
                                /*width:18px;*/
                                width: 50%;
                                border-radius: 0;
                                top: 10px;
                                left: 50%;
                            }

                            .panel-body .formart-wrap .formart-area .btn_group .btn.caret-down {
                                /*width:36px;*/
                                width: 100%;
                                border-radius: 0 0 4px 4px;
                                left: 0;
                                bottom: 0;
                            }

                            .panel-body .formart-wrap .formart-area .btn_group .btn:focus {
                                outline: none;
                            }

                            .panel-body .formart-wrap .formart-area .btn_group .btn .fa {
                                line-height: 5px;
                            }

                    .panel-body .area-check-wrap input {
                        float: left;
                        margin-right: 4px;
                        margin-top: 2px;
                        cursor: pointer;
                    }

                    .panel-body .area-check-wrap label {
                        cursor: pointer;
                    }

                .ztree * {
                    color: #000 !important;
                    font-size: 12px !important;
                }

                #catalog-data .tallSearch {
                    display: flex;
                }

                    #catalog-data .tallSearch .input-group {
                        width: 85%;
                        padding-right: 4px;
                    }

                        #catalog-data .tallSearch .input-group input {
                            height: 31px;
                            line-height: 31px;
                        }

                    #catalog-data .tallSearch .relate_wrap {
                        width: 15%;
                    }

                        #catalog-data .tallSearch .relate_wrap button {
                            width: 100%;
                            padding: 2.5px 0;
                            outline: none;
                        }

                .center-Panel .mygdt {
                    position: fixed;
                    /*top:280px;*/
                    top: 405px;
                    right: 15px;
                    height: 300px;
                    width: 100px;
                    box-shadow: darkgrey 3px 3px 3px -1px;
                    background: rgba(255,255,255,0.7);
                    border-radius: 3px;
                }

                    .center-Panel .mygdt .mygdt_gb {
                        position: absolute;
                        top: 0px;
                        right: 0px;
                    }

                        .center-Panel .mygdt .mygdt_gb i {
                            font-size: 14px;
                            margin: 3px 5px;
                            cursor: pointer;
                        }

                    .center-Panel .mygdt .p1 {
                        height: 30px;
                        line-height: 30px;
                        margin: 0;
                        text-align: center;
                    }

                    .center-Panel .mygdt .mygdt_gb_ul {
                        width: 100%;
                        overflow: hidden;
                        position: relative;
                    }

                        .center-Panel .mygdt .mygdt_gb_ul li {
                            cursor: pointer;
                        }

                        .center-Panel .mygdt .mygdt_gb_ul .img1 {
                            width: 92%;
                            margin: 5px 4%;
                            float: left;
                            max-height: 70px;
                            background: #fff;
                        }

                        .center-Panel .mygdt .mygdt_gb_ul li p {
                            text-align: center;
                        }

                            .center-Panel .mygdt .mygdt_gb_ul li p:hover {
                                color: #007aff;
                            }

                    .center-Panel .mygdt .mygdt_xx {
                        display: none;
                        position: fixed;
                        z-index: 9999;
                        /*top: 310px;*/
                        top: 435px;
                        right: 17px;
                        width: 360px;
                        height: 258px;
                        overflow: hidden;
                    }

                        .center-Panel .mygdt .mygdt_xx .mygdtxx_gb {
                            cursor: pointer;
                            position: absolute;
                            padding: 0 5px;
                            top: 3px;
                            right: 0px;
                            z-index: 99;
                        }

                            .center-Panel .mygdt .mygdt_xx .mygdtxx_gb i {
                                margin: 0 2px;
                            }

                        .center-Panel .mygdt .mygdt_xx .img2 {
                            position: absolute;
                        }

                .server-address .r-left {
                    padding: 10px 10px 8px 10px;
                    cursor: pointer;
                    border-radius: 3px;
                    background: rgba(255,255,255,0.7);
                    box-shadow: darkgrey 3px 3px 3px -1px;
                }

                    .server-address .r-left.active-show-btn {
                        background: #007aff;
                        color: #fff;
                    }

                    .server-address .r-left .ti-view-grid {
                        font-size: 18px;
                        /*color: #007aff;*/
                    }

                .server-address .server-address-list {
                    background: rgba(255,255,255,0.7);
                    box-shadow: darkgrey 3px 3px 3px -1px;
                    top: 0;
                    left: -95px;
                    border-radius: 3px;
                }

                    .server-address .server-address-list dl {
                        padding: 0 10px;
                        display: inline-block;
                        text-align: center;
                        cursor: pointer;
                        margin-bottom: 0;
                    }

                    .server-address .server-address-list .dt-img {
                        border: 1px solid #fff;
                        width: 50px;
                        -webkit-transition: all .3s;
                        -o-transition: all .3s;
                        transition: all .3s;
                    }

                    .server-address .server-address-list .dd-active > .dt-img {
                        border-color: #ccc;
                    }

                .righttag {
                    background: rgba(255,255,255,0.7);
                    box-shadow: darkgrey 3px 3px 3px -1px;
                    left: 340px;
                    bottom: 20px;
                    width: 400px;
                    height: 340px;
                    position: fixed;
                }

                    .righttag .panel-heading {
                        padding: 11px;
                    }

                    .righttag .seviceDataContent .font-title-little {
                        white-space: nowrap;
                    }

                    .righttag .seviceDataContent table tr th,
                    .righttag .seviceDataContent table tr td {
                        padding: 5px 0;
                        text-align: center;
                    }

                .panel-fixed {
                    overflow: auto;
                    padding: 0 10px;
                }

                .tools-group {
                    background: rgba(255,255,255,0.7);
                    box-shadow: darkgrey 3px 3px 3px -1px;
                    border-radius: 3px;
                }

                    .tools-group .btn-default {
                        background: transparent;
                        border-color: transparent;
                        overflow: hidden;
                        outline: none;
                    }

                        .tools-group .btn-default:hover {
                            /*background: #007aff;*/
                            background: rgba(0,122,255,0.7);
                            color: #fff;
                        }
                        /*.tools-group .btn-default:hover .map-icon:before{
            color:#fff;
        }*/
                        .tools-group .btn-default:active {
                            box-shadow: none;
                            outline: none;
                        }

                        .tools-group .btn-default span {
                            float: left;
                        }

                            .tools-group .btn-default span.map-icon {
                                margin: 1px 4px 0 0;
                                font-size: 14px;
                            }

                        .tools-group .btn-default.top-op-active {
                            background: #007aff;
                            color: #fff;
                        }

                            .tools-group .btn-default:hover .map-icon:before,
                            .tools-group .btn-default.top-op-active .map-icon:before {
                                color: #fff;
                            }

                    .tools-group .tmdtz_val {
                        margin-top: 31px;
                        padding: 28px 0px;
                        display: none;
                    }

                        .tools-group .tmdtz_val .slider-container {
                            margin: 0 auto;
                        }

                #spatial_query_html {
                    width: 600px;
                    position: absolute;
                    bottom: 20px;
                    left: 50%;
                    margin-left: -300px;
                    transition: bottom 0s;
                    background: rgba(255,255,255,0.9);
                    box-shadow: darkgrey 3px 3px 3px -1px;
                    z-index: 999;
                    border-radius: 3px;
                }

                #spatial_query {
                    height: 300px;
                    /*padding: 0 10px;*/
                    overflow-y: auto;
                }

                    #spatial_query table.featureInfo {
                        width: 100%;
                    }

                        #spatial_query table.featureInfo tbody tr:hover {
                            background: rgba(0,122,255,0.7);
                            color: #fff;
                        }

                    #spatial_query table tr th,
                    #spatial_query table tr td {
                        padding: 10px 15px;
                        text-align: left;
                    }
                /*.meng{
                position: relative;
                width: 100%;
                height: 100%;
            }
            .meng:after {
                content: "";
                position: absolute;
                width: 100%;
                height: 100%;
                left: 0;
                top: 0;
                background: rgba(31, 31, 31, 0.76);
                z-index: 99;
            }*/
    </style>
    @*<script src="/Content/scripts/plugins/datepicker/WdatePicker.js"></script>*@

    <link href="/Content/styles/zTree.css?v=YuHHwLlyRkkak45o7sXkeJr5BmpnDMBkYQrh3FiY_Sw1" rel="stylesheet" />
<style>
    .ie .bbit-tree .bbit-tree-bwrap {
    }

    .bbit-tree ul, .bbit-tree li {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .bbit-tree-body {
    }

    .bbit-tree-icon, .bbit-tree-ec-icon, .bbit-tree-node-cb, .bbit-tree-elbow-line, .bbit-tree-elbow, .bbit-tree-elbow-end, .bbit-tree-elbow-plus, .bbit-tree-elbow-minus, .bbit-tree-elbow-end-plus, .bbit-tree-elbow-end-minus {
        border: 0 none;
        height: 18px;
        margin: 0;
        padding: 0;
        margin-top: 3px;
        vertical-align: top;
        width: 16px;
        background-repeat: no-repeat;
    }

    .bbit-tree-node-cb {
        height: 16px;
        padding: 2px;
        margin-top: 4.5px;
        margin-right: 5px;
    }

    .bbit-tree-node-collapsed .bbit-tree-node-icon, .bbit-tree-node-expanded .bbit-tree-node-icon, .bbit-tree-node-leaf .bbit-tree-node-icon {
        border: 0 none;
        height: 18px;
        margin: 0;
        padding: 0;
        margin-top: 3px;
        vertical-align: top;
        width: 16px;
        background-position: center;
        background-repeat: no-repeat;
    }

    .ie .bbit-tree-node-indent img, .ie .bbit-tree-node-icon, .ie .bbit-tree-ec-icon {
        vertical-align: middle !important;
    }

    .bbit-tree-noicon .bbit-tree-node-icon {
        width: 0;
        height: 0;
    }

    .bbit-tree-no-lines .bbit-tree-elbow {
        background: transparent;
    }

    .bbit-tree-no-lines .bbit-tree-elbow-end {
        background: transparent;
    }

    .bbit-tree-no-lines .bbit-tree-elbow-line {
        background: transparent;
    }

    .bbit-tree-arrows .bbit-tree-elbow {
        background: transparent;
    }

    .bbit-tree-arrows .bbit-tree-elbow-plus {
        background: transparent no-repeat 0 0;
    }

    .bbit-tree-arrows .bbit-tree-elbow-minus {
        background: transparent no-repeat -16px 0;
    }

    .bbit-tree-arrows .bbit-tree-elbow-end {
        background: transparent;
    }

    .bbit-tree-arrows .bbit-tree-elbow-end-plus {
        background: transparent no-repeat 0 0;
    }

    .bbit-tree-arrows .bbit-tree-elbow-end-minus {
        background: transparent no-repeat -16px 0;
    }

    .bbit-tree-arrows .bbit-tree-elbow-line {
        background: transparent;
    }

    .bbit-tree-arrows .bbit-tree-ec-over .bbit-tree-elbow-plus {
        background-position: -32px 0;
    }

    .bbit-tree-arrows .bbit-tree-ec-over .bbit-tree-elbow-minus {
        background-position: -48px 0;
    }

    .bbit-tree-arrows .bbit-tree-ec-over .bbit-tree-elbow-end-plus {
        background-position: -32px 0;
    }

    .bbit-tree-arrows .bbit-tree-ec-over .bbit-tree-elbow-end-minus {
        background-position: -48px 0;
    }

    .bbit-tree-elbow-plus, .bbit-tree-elbow-minus, .bbit-tree-elbow-end-plus, .bbit-tree-elbow-end-minus {
        cursor: pointer;
    }

    .ie ul.bbit-tree-node-ct {
        line-height: 0;
        zoom: 1;
    }

    .bbit-tree-node {
        white-space: nowrap;
    }

    .bbit-tree-node-el {
        line-height: 25px;
        cursor: default;
    }

    .bbit-tree-node a {
        text-decoration: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -webkit-user-select: ignore;
        -kthml-user-focus: normal;
        -moz-user-focus: normal;
        -moz-outline: 0 none;
        outline: 0 none;
    }

        .bbit-tree-node a span {
            text-decoration: none;
            padding: 1px 3px 1px 2px;
        }

    .bbit-tree-node .bbit-tree-node-disabled .bbit-tree-node-icon {
        -moz-opacity: .5;
        opacity: .5;
        filter: alpha(opacity=50);
    }

    .bbit-tree-node .bbit-tree-node-inline-icon {
        background: transparent;
    }

    .bbit-tree-node a:hover {
        text-decoration: none;
    }

    .bbit-tree-root {
        zoom: 1;
    }

    .bbit-tree-node-expanded .bbit-tree-node-icon {
        background-image: url(images/tree/folder-open.gif);
    }

    .bbit-tree-node-leaf .bbit-tree-node-icon {
        background-image: url(images/tree/leaf.gif);
    }

    .bbit-tree-node-collapsed .bbit-tree-node-icon {
        background-image: url(images/tree/folder.gif);
    }

    .bbit-tree-node-loading .bbit-tree-node-icon {
        background-image: url(images/tree/loading.gif) !important;
    }

    .bbit-tree-node .bbit-tree-node-inline-icon {
        background-image: none;
    }

    .bbit-tree-node-loading a span {
        font-style: italic;
        color: #444;
    }

    .bbit-tree-lines .bbit-tree-elbow {
        background-image: url(images/tree/elbow.gif);
    }

    .bbit-tree-lines .bbit-tree-elbow-plus {
        background-image: url(images/tree/elbow-plus.gif);
    }

    .bbit-tree-lines .bbit-tree-elbow-minus {
        background-image: url(images/tree/elbow-minus.gif);
    }

    .bbit-tree-lines .bbit-tree-elbow-end {
        background-image: url(images/tree/elbow-end.gif);
    }

    .bbit-tree-lines .bbit-tree-elbow-end-plus {
        background-image: url(images/tree/elbow-end-plus.gif);
    }

    .bbit-tree-lines .bbit-tree-elbow-end-minus {
        background-image: url(images/tree/elbow-end-minus.gif);
    }

    .bbit-tree-lines .bbit-tree-elbow-line {
        background-image: url(images/tree/elbow-line.gif);
    }

    .bbit-tree-no-lines .bbit-tree-elbow-plus {
        background-image: url(images/tree/elbow-plus-nl.gif);
    }

    .bbit-tree-no-lines .bbit-tree-elbow-minus {
        background-image: url(images/tree/elbow-minus-nl.gif);
    }

    .bbit-tree-no-lines .bbit-tree-elbow-end-plus {
        background-image: url(images/tree/elbow-end-plus-nl.gif);
    }

    .bbit-tree-no-lines .bbit-tree-elbow-end-minus {
        background-image: url(images/tree/elbow-end-minus-nl.gif);
    }

    .bbit-tree-arrows .bbit-tree-elbow-plus {
        background-image: url(images/tree/arrows.gif);
    }

    .bbit-tree-arrows .bbit-tree-elbow-minus {
        background-image: url(images/tree/arrows.gif);
    }

    .bbit-tree-arrows .bbit-tree-elbow-end-plus {
        background-image: url(images/tree/arrows.gif);
    }

    .bbit-tree-arrows .bbit-tree-elbow-end-minus {
        background-image: url(images/tree/arrows.gif);
    }

    .bbit-tree-node {
        color: #000;
    }

        .bbit-tree-node i {
            font-size: 13px;
            width: 13px;
            color: #666;
        }

        .bbit-tree-node a {
            color: #000;
        }

            .bbit-tree-node a span {
                color: #000;
            }

        .bbit-tree-node .bbit-tree-node-disabled a span {
            color: gray !important;
        }

        .bbit-tree-node .bbit-tree-node-over {
            background-color: #eee;
        }

            .bbit-tree-node .bbit-tree-node-over span {
            }

        .bbit-tree-node .bbit-tree-selected {
            background-color: #337ab7;
            color: #fff;
        }

            .bbit-tree-node .bbit-tree-selected a span {
                color: #fff;
            }

            .bbit-tree-node .bbit-tree-selected i {
                color: #fff;
            }

        .bbit-tree-node .bbit-tree-node-tool {
            float: right;
        }

            .bbit-tree-node .bbit-tree-node-tool span {
                margin-right: 10px;
                font-size: 14px;
                display: none;
                line-height: 30px;
            }

        .bbit-tree-node .bbit-tree-selected .bbit-tree-node-tool span {
            display: inline-block;
        }
</style>
    <link href="/Content/styles/mapEditor.css?v=z0JLip_7UUhR8QqTHBciQD5t-4OA-E9ATdxjpfqK-Lo1" rel="stylesheet" />
    <link href="/Content/styles/learun.css?v=4mhVF2L9uEZqL1kRn4OWy0BSqWdAeOQpu1rh7f9EFJI1" rel="stylesheet" />

    <script src="/Content/scripts/utils/learun.js?v=9u23ZV9NogTChYd_qZfAs7atl7wX2qFLe_VTv3cVj1Y1"></script>
    @*<script src="/Content/scripts/utils/learunEx.js?v=SLN9t4L7n7eNsIktNsaNN-9JyvsKjb9zM4ihIMZR9fs1"></script>*@
@*<script>
    (function (n, t) { "use strict"; function r(n, t) { var r, u, i; try { if (r = "", u = t.length, u == undefined) r = t[n]; else for (i = 0; i < u; i++) if (n(t[i])) { r = t[i]; break } return r } catch (f) { return console.log(f.message), "" } } function u() { i.excelImportTemplate = i.excelImportTemplate || []; n.each(i.excelImportTemplate, function (n, t) { i.excelImportTemplate[n] = { keys: t } }) } var i = {}; t.data = { init: function (t) { var r = isLoadData(); r ? n.ajax({ url: contentPath + "/ClientData/GetClientDataJson", type: "post", dataType: "json", async: !1, success: function (r) { console.log("耗时：", r.message); i = r.resultdata; u(); t(); window.setTimeout(function () { n("#ajax-loader").fadeOut() }, 50) } }) : (t(), window.setTimeout(function () { n("#ajax-loader").fadeOut() }, 50)) }, get: function (n) { var u; if (!n) return ""; var e = n.length, t = "", f = i; for (u = 0; u < e; u++) if (t = r(n[u], f), t != "" && t != undefined) f = t; else break; return (t == undefined || t == null) && (t = ""), t } } })(window.jQuery, window.learun)
</script>*@
    <script src="@Url.Content("~/Scripts/jquery-1.8.2.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.cookie.js")"></script>
<script>
    (function (n) { var t = ""; try { t = getInfoTop().contentPath } catch (i) { t = top.contentPath } t || (t = ""); n.fn.swapClass = function (n, t) { return this.removeClass(n).addClass(t) }; n.fn.switchClass = function (n, t) { return this.hasClass(n) ? this.swapClass(n, t) : this.swapClass(t, n) }; n.fn.treeview = function (i) { function g() { var t = u.find("#txtTreeSearch"); t.bind("keyup", function (i) { if (i.keyCode == 13) { var f = t.val(); r.searchUrl && n.ajax({ type: r.method, url: r.searchUrl, data: f, async: !0, cache: !1, success: function (n) { var r = u.find(".bbit-tree-bwrap"), t, i; r.remove(); t = []; i = JSON.parse(n); tt(i, t); u.addClass("bbit-tree").append(t.join("")); l(u) }, error: function () { dialogMsg("服务端未响应。", -1) } }) } }) } function nt(n, t) { var u, i; if (r.isSearch ? t.push("<div id='treeSearch'><input id='txtTreeSearch' type='text' class='form-control' placeholder='请输入要查询关键字' /><\/div>") : t.push("<div id='treeSearch' style='display:none'><input id='txtTreeSearch' type='text' class='form-control' placeholder='请输入要查询关键字' /><\/div>"), t.push("<div class='bbit-tree-bwrap'>"), t.push("<div class='bbit-tree-body " + f + "'>"), t.push("<ul class='bbit-tree-root ", r.theme, "'>"), n && n.length > 0) for (r.description && n[0].text != r.description && n.unshift({ id: "", text: r.description, value: "", img: "-1", parentnodes: "0", showcheck: !1, isexpand: !0, complete: !0, hasChildren: !1, ChildNodes: [] }), u = n.length, i = 0; i < u; i++) e(n[i], t, 0, i, i == u - 1); else c(null, !1, function (n) { var u, i; if (n && n.length > 0) for (o = n, r.data = n, r.description && n.unshift({ id: "", text: r.description, value: "", img: "-1", parentnodes: "0", showcheck: !1, isexpand: !0, complete: !0, hasChildren: !1, ChildNodes: [] }), u = n.length, i = 0; i < u; i++) e(n[i], t, 0, i, i == u - 1) }); t.push("<\/ul>"); t.push("<\/div>"); t.push("<\/div>") } function tt(n, t) { var u, i; if (t.push("<div class='bbit-tree-bwrap'>"), t.push("<div class='bbit-tree-body " + f + "'>"), t.push("<ul class='bbit-tree-root ", r.theme, "'>"), n && n.length > 0) for (r.description && n[0].text != r.description && n.unshift({ id: "", text: r.description, value: "", img: "-1", parentnodes: "0", showcheck: !1, isexpand: !0, complete: !0, hasChildren: !1, ChildNodes: [] }), u = n.length, i = 0; i < u; i++) e(n[i], t, 0, i, i == u - 1); else c(null, !1, function (n) { var u, i; if (n && n.length > 0) for (o = n, r.data = n, r.description && n.unshift({ id: "", text: r.description, value: "", img: "-1", parentnodes: "0", showcheck: !1, isexpand: !0, complete: !0, hasChildren: !1, ChildNodes: [] }), u = n.length, i = 0; i < u; i++) e(n[i], t, 0, i, i == u - 1) }); t.push("<\/ul>"); t.push("<\/div>"); t.push("<\/div>") } function e(n, t, i, u, o) { var y = n.id.replace(/[^\w]/gi, "_"), a, h, v, p, l, c, s; if (t.push("<li class='bbit-tree-node'>"), a = n.title, a = a ? n.title : n.text, t.push("<div id='", f, "_", y, "' tpath='", u, "' unselectable='on' title='", a, "'"), h = [], h.push("bbit-tree-node-el"), n.hasChildren ? h.push(n.isexpand || r.isAllExpand ? "bbit-tree-node-expanded" : "bbit-tree-node-collapsed") : h.push("bbit-tree-node-leaf"), n.classes && h.push(n.classes), t.push(" class='", h.join(" "), "'>"), t.push("<span class='bbit-tree-node-indent'>"), i == 1) t.push("<img class='bbit-tree-icon' src='" + r.cbiconpath + "s.gif'/>"); else if (i > 1) for (t.push("<img class='bbit-tree-icon' src='" + r.cbiconpath + "s.gif'/>"), v = 1; v < i; v++) t.push("<img class='bbit-tree-elbow-line' src='" + r.cbiconpath + "s.gif'/>"); if (t.push("<\/span>"), h.length = 0, n.hasChildren ? n.isexpand || r.isAllExpand ? h.push(o ? "bbit-tree-elbow-end-minus" : "bbit-tree-elbow-minus") : h.push(o ? "bbit-tree-elbow-end-plus" : "bbit-tree-elbow-plus") : h.push(o ? "bbit-tree-elbow-end" : "bbit-tree-elbow"), t.push("<img class='bbit-tree-ec-icon ", h.join(" "), "' src='" + r.cbiconpath + "s.gif'/>"), r.showcheck && n.showcheck && ((n.checkstate == null || n.checkstate == undefined) && (n.checkstate = 0), t.push("<img  id='", f, "_", y, "_cb' class='bbit-tree-node-cb' src='", r.cbiconpath, r.icons[n.checkstate], "'/>")), n.hasChildren ? n.img == -1 ? t.push("") : n.img ? t.push('<i class="' + n.img + '"><\/i>&nbsp;') : t.push("<i class=\"fa fa-folder-open\" style='width:15px'>&nbsp;<\/i>") : n.img == -1 ? t.push("") : n.img ? t.push('<i class="' + n.img + '"><\/i>&nbsp;') : t.push('<i class="fa fa-file-o"><\/i>&nbsp;'), t.push("<a hideFocus class='bbit-tree-node-anchor' tabIndex=1 href='javascript:void(0);'>"), t.push("<span data-value='" + n.id + "' class='bbit-tree-node-text' unselectable='on'>", n.text, "<\/span>"), t.push("<\/a>"), r.isTool) { t.push("<div class='bbit-tree-node-tool'>"); for (p in r.nodeTools) l = r.nodeTools[p], (l.node == undefined || l.node == n.type) && t.push("<span class='" + l.img + "'  data-value='" + n.id + "' title='" + l.text + "'><\/span>"); t.push("<\/div>") } if (t.push("<\/div>"), n.hasChildren) if (n.isexpand || r.isAllExpand) { if (t.push("<ul  class='bbit-tree-node-ct'  style='z-index: 0; position: static; visibility: visible; top: auto; left: auto;'>"), n.ChildNodes) for (c = n.ChildNodes.length, s = 0; s < c; s++) n.ChildNodes[s].parent = n, e(n.ChildNodes[s], t, i + 1, u + "." + s, s == c - 1); t.push("<\/ul>") } else { if (t.push("<ul style='display:none;'>"), n.ChildNodes) for (c = n.ChildNodes.length, s = 0; s < c; s++) n.ChildNodes[s].parent = n, e(n.ChildNodes[s], t, i + 1, u + "." + s, s == c - 1); t.push("<\/ul>") } t.push("<\/li>"); n.render = !0 } function p(n) { for (var r = n.split("."), i = o, t = 0; t < r.length; t++) i = t == 0 ? i[r[t]] : i.ChildNodes[r[t]]; return i } function a(t, i, u) { var l = t.checkstate, e, c, s; if (u == 1) t.checkstate = i; else { var o = t.ChildNodes, a = o.length, h = !0; for (e = 0; e < a; e++) if (i == 1 && o[e].checkstate != 1 || i == 0 && o[e].checkstate != 0) { h = !1; break } t.checkstate = h ? i : 2 } t.render && l != t.checkstate && (c = t.id.replace(/[^\w]/gi, "_"), s = n("#" + f + "_" + c + "_cb"), s.length == 1 && s.attr("src", r.cbiconpath + r.icons[t.checkstate])) } function w(n, t, i) { var u, r, f; if (n(t, i, 1) != !1 && t.ChildNodes != null && t.ChildNodes.length > 0) for (u = t.ChildNodes, r = 0, f = u.length; r < f; r++) w(n, u[r], i) } function it(n, t, i) { for (var r = t.parent; r;) { if (n(r, i, 0) === !1) break; r = r.parent } } function rt(t) { var s = n(this).attr("tpath"), u = t.target || t.srcElement, i = p(s), e, h, o, l, v; u.tagName == "IMG" ? n(u).hasClass("bbit-tree-elbow-plus") || n(u).hasClass("bbit-tree-elbow-end-plus") ? (n(this).find("i").hasClass("fa-folder") && n(this).find("i").swapClass("fa-folder", "fa-folder-open"), e = n(this).next(), e.hasClass("bbit-tree-node-ct") ? e.slideDown(200) : (h = s.split(".").length, i.complete ? i.ChildNodes != null && b(i.ChildNodes, h, s, e, i) : (n(this).addClass("bbit-tree-node-loading"), c(i, !0, function (n) { i.complete = !0; i.ChildNodes = n; b(n, h, s, e, i) }))), n(u).hasClass("bbit-tree-elbow-plus") ? n(u).swapClass("bbit-tree-elbow-plus", "bbit-tree-elbow-minus") : n(u).swapClass("bbit-tree-elbow-end-plus", "bbit-tree-elbow-end-minus"), n(this).swapClass("bbit-tree-node-collapsed", "bbit-tree-node-expanded")) : n(u).hasClass("bbit-tree-elbow-minus") || n(u).hasClass("bbit-tree-elbow-end-minus") ? (n(this).find("i").hasClass("fa-folder-open") && n(this).find("i").swapClass("fa-folder-open", "fa-folder"), n(this).next().slideUp(200), n(u).hasClass("bbit-tree-elbow-minus") ? n(u).swapClass("bbit-tree-elbow-minus", "bbit-tree-elbow-plus") : n(u).swapClass("bbit-tree-elbow-end-minus", "bbit-tree-elbow-end-plus"), n(this).swapClass("bbit-tree-node-expanded", "bbit-tree-node-collapsed")) : n(u).hasClass("bbit-tree-node-cb") && (o = i.checkstate != 1 ? 1 : 0, l = !0, r.oncheckboxclick && (l = r.oncheckboxclick.call(u, i, o)), l != !1 && (r.cascadecheck ? (w(a, i, o), it(a, i, o)) : a(i, o, 1))) : (r.citem && (v = r.citem.id.replace(/[^\w]/gi, "_"), n("." + f).removeClass("bbit-tree-selected")), r.citem = i, n("." + f).find("div").removeClass("bbit-tree-selected"), n(this).addClass("bbit-tree-selected"), r.onnodeclick && (i.expand || (i.expand = function () { ut.call(i) }), r.onnodeclick.call(this, i))) } function ut() { var i = this, r = i.id.replace(/[^\w]/gi, "_"), t = n("#" + f + "_" + r + " img.bbit-tree-ec-icon"); t.length > 0 && t.click() } function b(n, t, i, r, u) { var s = n.length, o, f; if (s > 0) { for (o = [], f = 0; f < s; f++) n[f].parent = u, e(n[f], o, t, i + "." + f, f == s - 1); r.html(o.join("")); o = null; l(r) } r.addClass("bbit-tree-node-ct").css({ "z-index": 0, position: "static", visibility: "visible", top: "auto", left: "auto", display: "" }); r.prev().removeClass("bbit-tree-node-loading") } function c(t, i, u) { var f; r.url && (t && t != null && (f = ft(t)), r.param != null && (f = r.param), n.ajax({ type: r.method, url: r.url, data: f, async: i, dataType: r.datatype, cache: !1, success: u, error: function () { dialogMsg("服务端未响应。", -1) } })) } function ft(n) { return [{ name: "id", value: encodeURIComponent(n.id) }, { name: "text", value: encodeURIComponent(n.text) }, { name: "value", value: encodeURIComponent(n.value) }, { name: "checkstate", value: n.checkstate }] } function k() { var t, i; if (n(this).hover(function () { n(this).addClass("bbit-tree-node-over") }, function () { n(this).removeClass("bbit-tree-node-over") }).click(rt).find("img.bbit-tree-ec-icon").each(function () { n(this).hasClass("bbit-tree-elbow") || n(this).hover(function () { n(this).parent().addClass("bbit-tree-ec-over") }, function () { n(this).parent().removeClass("bbit-tree-ec-over") }) }), r.isTool) for (t in r.nodeTools) i = r.nodeTools[t], i.callback != undefined && n(n(".bbit-tree-node-tool span", n(this))[t]).click(function () { var t = n(this).attr("data-value"); i.callback(t) }) } function l(t) { var i = n("li.bbit-tree-node>div", t); i.each(k) } function et(t) { var o = t.replace(/[^\w-]/gi, "_"), r = n("#" + f + "_" + o); if (r.length > 0) { r.addClass("bbit-tree-node-loading"); var s = r.hasClass("bbit-tree-elbow-end") || r.hasClass("bbit-tree-elbow-end-plus") || r.hasClass("bbit-tree-elbow-end-minus"), u = r.attr("tpath"), h = u.split(".").length, i = p(u); i && c(i, !0, function (n) { var t, f; i.complete = !0; i.ChildNodes = n; i.isexpand = !0; i.hasChildren = n && n.length > 0 ? !0 : !1; t = []; e(i, t, h - 1, u, s); t.shift(); t.pop(); f = r.parent(); f.html(t.join("")); t = null; l(f); k.call(f.find(">div")) }) } } function v(n, t, i) { for (var r = 0, u = n.length; r < u; r++) n[r].showcheck == !0 && n[r].checkstate == 1 && t.push(i(n[r])), n[r].ChildNodes != null && n[r].ChildNodes.length > 0 && v(n[r].ChildNodes, t, i) } function d(n, t, i) { for (var r = 0, u = n.length; r < u; r++) n[r].showcheck == !0 && (n[r].checkstate == 1 || n[r].checkstate == 2) && t.push(i(n[r])), n[r].ChildNodes != null && n[r].ChildNodes.length > 0 && d(n[r].ChildNodes, t, i) } var r = { method: "GET", datatype: "json", url: !1, param: null, cbiconpath: t + "/Content/scripts/plugins/tree/images/icons/", icons: ["checkbox_0.png", "checkbox_1.png", "checkbox_2.png"], showcheck: !1, oncheckboxclick: !1, onnodeclick: !1, cascadecheck: !0, isSearch: !1, searchUrl: !1, data: null, clicktoggle: !0, theme: "bbit-tree-arrows", isTool: !1, nodeTools: [], isAllExpand: !0 }, s, h, y; n.extend(r, i); var o = r.data, u = n(this), f = u.attr("id"); if ((f == null || f == "") && (f = "bbtree" + (new Date).getTime(), u.attr("id", f)), u.height(r.height), r.slimscroll == !0 ? u.css({ overflow: "auto", "overflow-y": "hidden" }) : u.css({ overflow: "auto" }), s = [], nt(r.data, s), u.html(""), u.addClass("bbit-tree").append(s.join("")), l(u), g(), s = null, r.showcheck) for (h = 0; h < 3; h++) y = new Image, y.src = r.cbiconpath + r.icons[h]; return u[0].t = { getSelectedNodes: function (n) { var t = []; return n ? d(o, t, function (n) { return n }) : v(o, t, function (n) { return n }), t }, getSelectedValues: function () { var n = []; return v(o, n, function (n) { return n.value }), n }, getCurrentItem: function () { return r.citem }, reflash: function (n) { var t; t = typeof n == "string" ? n : n.id; et(t) } }, u }; n.fn.getCheckedNodes = function () { return this[0].t ? this[0].t.getSelectedValues() : null }; n.fn.getCheckedAllNodes = function () { var t = n(this), r = t.attr("id").trim().length + 1, i = []; return t.find(".bbit-tree-node-cb").each(function () { var t = n(this).attr("src"), u; t = t.substr(t.lastIndexOf("/") + 1); (t == "checkbox_1.png" || t == "checkbox_2.png") && (u = n(this).attr("id").substring(parseInt(r)).replace(/_/g, "-"), u = u.substring(0, u.length - 3), i.push(u)) }), i }; n.fn.setCheckedNodes = function (t) { var i = n(this), r = i.attr("id").trim(); n.each(t, function (n, t) { var u = i.find("#" + r + "_" + t.replace(/-/g, "_") + "_cb"); u.length != 0 && u.trigger("click") }) }; n.fn.setCheckedNodeOne = function (t) { var i = n(this), u = i.attr("id").trim(), r = i.find("#" + u + "_" + t.replace(/-/g, "_") + "_cb"); r.length != 0 && r.trigger("click") }; n.fn.setNoCheckedNodes = function (t) { var i = n(this), u = i.attr("id").trim(), r = i.find("#" + u + "_" + t.replace(/-/g, "_") + "_cb"), f = r.attr("src"); r.attr("src", f.replace("checkbox_1.png", "checkbox_0.png")) }; n.fn.getTSNs = function (n) { return this[0].t ? this[0].t.getSelectedNodes(n) : null }; n.fn.getCurrentNode = function () { return this[0].t ? this[0].t.getCurrentItem() : null }; n.fn.reflash = function (n) { if (this[0].t) return this[0].t.reflash(n) }; n.fn.setTreeHeight = function (t) { var i = n(this); i.height(t) }; n.fn.setNodeChecked = function (t) { var i = n(this), u = i.attr("id").trim(), r; i.find(".bbit-tree-selected").removeClass("bbit-tree-selected"); r = i.find("#" + u + "_" + t.replace(/-/g, "_")); r.addClass("bbit-tree-selected") }; n.fn.refreshNode = function (t, i) { var r = n(this), u = r.attr("id").trim(), f = r.find("#" + u + "_" + t.replace(/-/g, "_")).find('span[data-value = "' + t + '" ]'); f.html(i) }; n.fn.refreshNodeIcon = function (t, i, r) { var u = n(this), s = u.attr("id").trim(), f = u.find("#" + s + "_" + t.replace(/-/g, "_")).find("i"), o, e; r != undefined && (o = f.attr("class"), e = u.find(r), e.removeAttr("class"), e.addClass(o)); f.removeAttr("class"); f.addClass(i) } })(jQuery)
</script>
   <script>
       !function (n, t) { "use strict"; var r, f, u = { getPath: function () { var n = document.scripts, t = n[n.length - 1], i = t.src; if (!t.getAttribute("merge")) return i.substring(0, i.lastIndexOf("/") + 1) }(), config: {}, end: {}, btn: ["&#x786E;&#x5B9A;", "&#x53D6;&#x6D88;"], type: ["dialog", "page", "iframe", "loading", "tips"] }, e, i; n.layer = { v: "1.9.3", ie6: !!n.ActiveXObject && !n.XMLHttpRequest, index: 0, path: u.getPath, config: function (n, t) { var i = 0; return n = n || {}, layer.cache = u.config = r.extend(u.config, n), layer.path = u.config.path || layer.path, "string" == typeof n.extend && (n.extend = [n.extend]), layer.use("skin/dialog.css", n.extend && n.extend.length > 0 ? function f() { var r = n.extend; layer.use(r[r[i] ? i : i - 1], i < r.length ? function () { return ++i, f }() : t) }() : t), this }, use: function (n, t, i) { var o = r("head")[0], n = n.replace(/\s/g, ""), u = /\.css$/.test(n), f = document.createElement(u ? "link" : "script"), e = "layui_layer_" + n.replace(/\.|\//g, ""); if (layer.path) return (u && (f.rel = "stylesheet"), f[u ? "href" : "src"] = /^http:\/\//.test(n) ? n : layer.path + n, f.id = e, r("#" + e)[0] || o.appendChild(f), function s() { (u ? 1989 === parseInt(r("#" + e).css("width")) : layer[i || e]) ? function () { t && t(); try { u || o.removeChild(f) } catch (n) { } }() : setTimeout(s, 100) }(), this) }, ready: function (n, t) { var i = "function" == typeof n; return i && (t = n), layer.config(r.extend(u.config, function () { return i ? {} : { path: n } }()), t), this }, alert: function (n, t, i) { var u = "function" == typeof t; return u && (i = t), layer.open(r.extend({ content: n, yes: i }, u ? {} : t)) }, confirm: function (n, t, i, f) { var e = "function" == typeof t; return e && (f = i, i = t), layer.open(r.extend({ content: n, btn: u.btn, yes: i, cancel: f }, e ? {} : t)) }, msg: function (n, f, e) { var h = "function" == typeof f, o = u.config.skin, s = (o ? o + " " + o + "-msg" : "") || "layui-layer-msg", c = i.anim.length - 1; return h && (e = f), layer.open(r.extend({ content: n, time: 3e3, shade: !1, skin: s, title: !1, closeBtn: !1, btn: !1, end: e }, h && !u.config.skin ? { skin: s + " layui-layer-hui", shift: c } : function () { return f = f || {}, (-1 === f.icon || f.icon === t && !u.config.skin) && (f.skin = s + " " + (f.skin || "layui-layer-hui")), f }())) }, load: function (n, t) { return layer.open(r.extend({ type: 3, icon: n || 0, shade: .01 }, t)) }, tips: function (n, t, i) { return layer.open(r.extend({ type: 4, content: [n, t], closeBtn: !1, time: 3e3, maxWidth: 210 }, i)) } }; e = function (n) { var t = this; t.index = ++layer.index; t.config = r.extend({}, t.config, u.config, n); t.creat() }; e.pt = e.prototype; i = ["layui-layer", ".layui-layer-title", ".layui-layer-main", ".layui-layer-dialog", "layui-layer-iframe", "layui-layer-content", "layui-layer-btn", "layui-layer-close"]; i.anim = ["layui-anim", "layui-anim-01", "layui-anim-02", "layui-anim-03", "layui-anim-04", "layui-anim-05", "layui-anim-06"]; e.pt.config = { type: 0, shade: .3, fix: !0, move: i[1], title: "", offset: "auto", area: "auto", closeBtn: 1, time: 0, zIndex: 2900, maxWidth: "auto", shift: -1, icon: -1, scrollbar: !0, tips: 2 }; e.pt.vessel = function (n, t) { var e = this, f = e.index, r = e.config, o = r.zIndex + f, s = "object" == typeof r.title, c = r.maxmin && (1 === r.type || 2 === r.type), h = r.title ? '<div class="layui-layer-title" style="' + (s ? r.title[1] : "") + '">' + (s ? r.title[0] : r.title) + "<\/div>" : "", l = getInfoTop().$(".layui-layer-shade").length, a = r.shade[0] || r.shade; return l > 0, r.zIndex = o, t([r.shade ? '<div class="layui-layer-shade" id="layui-layer-shade' + f + '" times="' + f + '" style="' + ("z-index:" + (o - 1) + "; background-color:" + (r.shade[1] || "#000") + "; opacity:" + a + "; filter:alpha(opacity=" + (100 * r.shade[0] || 100 * r.shade) + ");") + '"><\/div>' : "", '<div class="' + i[0] + " " + (i.anim[r.shift] || "") + (" layui-layer-" + u.type[r.type]) + (0 != r.type && 2 != r.type || r.shade ? "" : " layui-layer-border") + " " + (r.skin || "") + '" id="' + i[0] + f + '" type="' + u.type[r.type] + '" times="' + f + '" showtime="' + r.time + '" conType="' + (n ? "object" : "string") + '" style="z-index: ' + o + "; width:" + r.area[0] + ";height:" + r.area[1] + (r.fix ? "" : ";position:absolute;") + '">' + (n && 2 != r.type ? "" : h) + '<div class="layui-layer-content' + (0 == r.type && -1 !== r.icon ? " layui-layer-padding" : "") + (3 == r.type ? " layui-layer-loading" + r.icon : "") + '">' + (0 == r.type && -1 !== r.icon ? '<i class="layui-layer-ico layui-layer-ico' + r.icon + '"><\/i>' : "") + (1 == r.type && n ? "" : r.content || "") + '<\/div><span class="layui-layer-setwin">' + function () { var n = c ? '<a class="layui-layer-min" href="javascript:;"><cite><\/cite><\/a><a class="layui-layer-ico layui-layer-max" href="javascript:;"><\/a>' : ""; return r.closeBtn && (n += '<a class="' + i[7] + " " + i[7] + (r.title ? r.closeBtn : 4 == r.type ? "1" : "2") + '" href="javascript:;">×<\/a>'), n }() + "<\/span>" + (r.btn ? function () { var f = "", n, e, t; for ("string" == typeof r.btn && (r.btn = [r.btn]), n = 0, e = r.btn.length; e > n; n++) f += '<a class="' + i[6] + n + '">' + r.btn[n] + "<\/a>"; return t = "", u.type[r.type] == "iframe" && (t = '<div style="float: left;padding-top:5px;padding-left:15px;-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;-khtml-user-select: none;user-select: none;"><input checked="checked" type="checkbox" id="IsdialogClose" style="vertical-align: middle;margin-bottom:2px;" /><label style=";padding-left:5px;cursor:pointer" for="IsdialogClose">确认并关闭窗口<\/label><\/div>'), '<div class="' + i[6] + '">' + f + t + "<\/div>" }() : "") + "<\/div>"], h), e }; e.pt.creat = function () { var t = this, n = t.config, o = t.index, e = n.content, s = "object" == typeof e, h; switch ("string" == typeof n.area && (n.area = "auto" === n.area ? ["", ""] : [n.area, ""]), n.type) { case 0: n.btn = "btn" in n ? n.btn : u.btn[0]; layer.closeAll("dialog"); break; case 2: e = n.content = s ? n.content : [n.content || "", "auto"]; h = '<div class="ajax-loader" style="cursor: progress; position: absolute; width: 100%; height: 100%; background: #fff; z-index: 100; overflow: hidden;"><\/div>'; n.content = h + '<iframe scrolling="' + (n.content[1] || "auto") + '" allowtransparency="true" id="' + n.id + '" name="' + n.id + '"frameborder="0" src="' + n.content[0] + '"><\/iframe>'; break; case 3: n.title = !1; n.closeBtn = !1; -1 === n.icon && 0 === n.icon; layer.closeAll("loading"); break; case 4: s || (n.content = [n.content, "body"]); n.follow = n.content[1]; n.content = n.content[0] + '<i class="layui-layer-TipsG"><\/i>'; n.title = !1; n.shade = !1; n.fix = !1; n.tips = "object" == typeof n.tips ? n.tips : [n.tips, !0]; n.tipsMore || layer.closeAll("tips") } t.vessel(s, function (u, f) { r("body").append(u[0]); s ? function () { 2 == n.type || 4 == n.type ? function () { r("body").append(u[1]) }() : function () { e.parents("." + i[0])[0] || (e.show().addClass("layui-layer-wrap").wrap(u[1]), r("#" + i[0] + o).find("." + i[5]).before(f)) }() }() : r("body").append(u[1]); t.layero = r("#" + i[0] + o); n.scrollbar || i.html.css("overflow", "hidden").attr("layer-full", o) }).auto(o); 2 == n.type && layer.ie6 && t.layero.find("iframe").attr("src", e[0]); 4 == n.type ? t.tips() : t.offset(); n.fix && f.on("resize", function () { t.offset(); (/^\d+%$/.test(n.area[0]) || /^\d+%$/.test(n.area[1])) && t.auto(o); 4 == n.type && t.tips() }); n.time <= 0 || setTimeout(function () { layer.close(t.index) }, n.time); t.move().callback() }; e.pt.auto = function (n) { function e(n) { n = t.find(n); n.height(o[1] - h - c - 2 * (0 | parseFloat(n.css("padding")))) } var s = this, u = s.config, t = r("#" + i[0] + n); "" === u.area[0] && u.maxWidth > 0 && (/MSIE 7/.test(navigator.userAgent) && u.btn && t.width(t.innerWidth()), t.outerWidth() > u.maxWidth && t.width(u.maxWidth)); var o = [t.innerWidth(), t.innerHeight()], h = t.find(i[1]).outerHeight() || 0, c = t.find("." + i[6]).outerHeight() || 0; switch (u.type) { case 2: e("iframe"); break; default: "" === u.area[1] ? u.fix && o[1] > f.height() && (o[1] = f.height(), e("." + i[5])) : e("." + i[5]) } return s }; e.pt.offset = function () { var n = this, t = n.config, r = n.layero, i = [r.outerWidth(), r.outerHeight()], u = "object" == typeof t.offset; n.offsetTop = (f.height() - i[1]) / 2; n.offsetLeft = (f.width() - i[0]) / 2; u ? (n.offsetTop = t.offset[0], n.offsetLeft = t.offset[1] || n.offsetLeft) : "auto" !== t.offset && (n.offsetTop = t.offset, "rb" === t.offset && (n.offsetTop = f.height() - i[1], n.offsetLeft = f.width() - i[0])); t.fix || (n.offsetTop = /%$/.test(n.offsetTop) ? f.height() * parseFloat(n.offsetTop) / 100 : parseFloat(n.offsetTop), n.offsetLeft = /%$/.test(n.offsetLeft) ? f.width() * parseFloat(n.offsetLeft) / 100 : parseFloat(n.offsetLeft), n.offsetTop += f.scrollTop(), n.offsetLeft += f.scrollLeft()); r.css({ top: n.offsetTop, left: n.offsetLeft }) }; e.pt.tips = function () { var c = this, t = c.config, s = c.layero, u = [s.outerWidth(), s.outerHeight()], e = r(t.follow); e[0] || (e = r("body")); var n = { width: e.outerWidth(), height: e.outerHeight(), top: e.offset().top, left: e.offset().left }, o = s.find(".layui-layer-TipsG"), h = t.tips[0]; t.tips[1] || o.remove(); n.autoLeft = function () { n.left + u[0] - f.width() > 0 ? (n.tipLeft = n.left + n.width - u[0], o.css({ right: 12, left: "auto" })) : n.tipLeft = n.left }; n.where = [function () { n.autoLeft(); n.tipTop = n.top - u[1] - 10; o.removeClass("layui-layer-TipsB").addClass("layui-layer-TipsT").css("border-right-color", t.tips[1]) }, function () { n.tipLeft = n.left + n.width + 10; n.tipTop = n.top; o.removeClass("layui-layer-TipsL").addClass("layui-layer-TipsR").css("border-bottom-color", t.tips[1]) }, function () { n.autoLeft(); n.tipTop = n.top + n.height + 10; o.removeClass("layui-layer-TipsT").addClass("layui-layer-TipsB").css("border-right-color", t.tips[1]) }, function () { n.tipLeft = n.left - u[0] - 10; n.tipTop = n.top; o.removeClass("layui-layer-TipsR").addClass("layui-layer-TipsL").css("border-bottom-color", t.tips[1]) }]; n.where[h - 1](); 1 === h ? n.top - (f.scrollTop() + u[1] + 16) < 0 && n.where[2]() : 2 === h ? f.width() - (n.left + n.width + u[0] + 16) > 0 || n.where[3]() : 3 === h ? n.top - f.scrollTop() + n.height + u[1] + 16 - f.height() > 0 && n.where[0]() : 4 === h && u[0] + 16 - n.left > 0 && n.where[1](); s.find("." + i[5]).css({ "background-color": t.tips[1], "padding-right": t.closeBtn ? "30px" : "" }); s.css({ left: n.tipLeft, top: n.tipTop }) }; e.pt.move = function () { var u = this, t = u.config, n = { setY: 0, moveLayer: function () { var t = n.layero, r = parseInt(t.css("margin-left")), i = parseInt(n.move.css("left")); 0 === r || (i -= r); "fixed" !== t.css("position") && (i -= t.parent().offset().left, n.setY = 0); t.css({ left: i, top: parseInt(n.move.css("top")) - n.setY }) } }, e = u.layero.find(t.move); return t.move && e.attr("move", "ok"), e.css({ cursor: t.move ? "move" : "auto" }), r(t.move).on("mousedown", function (u) { if (u.preventDefault(), "ok" === r(this).attr("move")) { n.ismove = !0; n.layero = r(this).parents("." + i[0]); var e = n.layero.offset().left, o = n.layero.offset().top, s = n.layero.outerWidth() - 6, h = n.layero.outerHeight() - 6; r("#layui-layer-moves")[0] || r("body").append('<div id="layui-layer-moves" class="layui-layer-moves" style="left:' + e + "px; top:" + o + "px; width:" + s + "px; height:" + h + 'px; z-index:2147483584"><\/div>'); n.move = r("#layui-layer-moves"); t.moveType && n.move.css({ visibility: "hidden" }); n.moveX = u.pageX - n.move.position().left; n.moveY = u.pageY - n.move.position().top; "fixed" !== n.layero.css("position") || (n.setY = f.scrollTop()) } }), r(document).mousemove(function (i) { var r, u, e, o; n.ismove && (r = i.pageX - n.moveX, u = i.pageY - n.moveY, (i.preventDefault(), t.moveOut) || (n.setY = f.scrollTop(), e = f.width() - n.move.outerWidth(), o = n.setY, 0 > r && (r = 0), r > e && (r = e), o > u && (u = o), u > f.height() - n.move.outerHeight() + n.setY && (u = f.height() - n.move.outerHeight() + n.setY)), n.move.css({ left: r, top: u }), t.moveType && n.moveLayer(), r = u = e = o = null) }).mouseup(function () { try { n.ismove && (n.moveLayer(), n.move.remove()); n.ismove = !1 } catch (i) { n.ismove = !1 } t.moveEnd && t.moveEnd() }), u }; e.pt.callback = function () { function e() { var i = n.cancel && n.cancel(t.index); i === !1 || layer.close(t.index) } var t = this, f = t.layero, n = t.config; t.openLayer(); n.success && (2 == n.type ? f.find("iframe")[0].onload = function () { this.className = ""; n.success(f, t.index) } : n.success(f, t.index)); layer.ie6 && t.IE6(f); f.find("." + i[6]).children("a").on("click", function () { var i = r(this).index(); 0 === i ? n.yes ? n.yes(t.index, f) : layer.close(t.index) : 1 === i ? e() : n["btn" + (i + 1)] ? n["btn" + (i + 1)](t.index, f) : layer.close(t.index) }); f.find("." + i[7]).on("click", e); n.shadeClose && r("#layui-layer-shade" + t.index).on("click", function () { layer.close(t.index) }); f.find(".layui-layer-min").on("click", function () { layer.min(t.index, n); n.min && n.min(f) }); f.find(".layui-layer-max").on("click", function () { r(this).hasClass("layui-layer-maxmin") ? (layer.restore(t.index), n.restore && n.restore(f)) : (layer.full(t.index, n), n.full && n.full(f)) }); n.end && (u.end[t.index] = n.end) }; u.reselect = function () { r.each(r("select"), function () { var n = r(this); n.parents("." + i[0])[0] || 1 == n.attr("layer") && r("." + i[0]).length < 1 && n.removeAttr("layer").show(); n = null }) }; e.pt.IE6 = function (n) { function t() { n.css({ top: e + (u.config.fix ? f.scrollTop() : 0) }) } var u = this, e = n.offset().top; t(); f.scroll(t); r("select").each(function () { var n = r(this); n.parents("." + i[0])[0] || "none" === n.css("display") || n.attr({ layer: "1" }).hide(); n = null }) }; e.pt.openLayer = function () { var n = this; layer.zIndex = n.config.zIndex; layer.setTop = function (n) { var t = function () { layer.zIndex++; n.css("z-index", layer.zIndex + 1) }; return layer.zIndex = parseInt(n[0].style.zIndex), n.on("mousedown", t), layer.zIndex } }; u.record = function (n) { var t = [n.outerWidth(), n.outerHeight(), n.position().top, n.position().left + parseFloat(n.css("margin-left"))]; n.find(".layui-layer-max").addClass("layui-layer-maxmin"); n.attr({ area: t }) }; u.rescollbar = function (n) { i.html.attr("layer-full") == n && (i.html[0].style.removeProperty ? i.html[0].style.removeProperty("overflow") : i.html[0].style.removeAttribute("overflow"), i.html.removeAttr("layer-full")) }; layer.getChildFrame = function (n, t) { return t = t || r("." + i[4]).attr("times"), r("#" + i[0] + t).find("iframe").contents().find(n) }; layer.getFrameIndex = function (n) { return r("#" + n).parents("." + i[4]).attr("times") }; layer.iframeAuto = function (n) { if (n) { var u = layer.getChildFrame("body", n).outerHeight(), t = r("#" + i[0] + n), f = t.find(i[1]).outerHeight() || 0, e = t.find("." + i[6]).outerHeight() || 0; t.css({ height: u + f + e }); t.find("iframe").css({ height: u }) } }; layer.iframeSrc = function (n, t) { r("#" + i[0] + n).find("iframe").attr("src", t) }; layer.style = function (n, t) { var f = r("#" + i[0] + n), e = f.attr("type"), o = f.find(i[1]).outerHeight() || 0, s = f.find("." + i[6]).outerHeight() || 0; (e === u.type[1] || e === u.type[2]) && (f.css(t), e === u.type[2] && f.find("iframe").css({ height: parseFloat(t.height) - o - s })) }; layer.min = function (n) { var t = r("#" + i[0] + n), f = t.find(i[1]).outerHeight() || 0; u.record(t); layer.style(n, { width: 180, height: f, overflow: "hidden" }); t.find(".layui-layer-min").hide(); "page" === t.attr("type") && t.find(i[4]).hide(); u.rescollbar(n) }; layer.restore = function (n) { var t = r("#" + i[0] + n), f = t.attr("area").split(","); t.attr("type"); layer.style(n, { width: parseFloat(f[0]), height: parseFloat(f[1]), top: parseFloat(f[2]), left: parseFloat(f[3]), overflow: "visible" }); t.find(".layui-layer-max").removeClass("layui-layer-maxmin"); t.find(".layui-layer-min").show(); "page" === t.attr("type") && t.find(i[4]).show(); u.rescollbar(n) }; layer.full = function (n) { var e, t = r("#" + i[0] + n); u.record(t); i.html.attr("layer-full") || i.html.css("overflow", "hidden").attr("layer-full", n); clearTimeout(e); e = setTimeout(function () { var i = "fixed" === t.css("position"); layer.style(n, { top: i ? 0 : f.scrollTop(), left: i ? 0 : f.scrollLeft(), width: f.width(), height: f.height() - 14 }); t.find(".layui-layer-min").hide() }, 100) }; layer.title = function (n, t) { var u = r("#" + i[0] + (t || layer.index)).find(i[1]); u.html(n) }; layer.close = function (n) { var t = r("#" + i[0] + n), o = t.attr("type"), e, f; if (t[0]) { if (o === u.type[1] && "object" === t.attr("conType")) for (t.children(":not(." + i[5] + ")").remove(), e = 0; 2 > e; e++) t.find(".layui-layer-wrap").unwrap().hide(); else { if (o === u.type[2]) try { f = r("#" + i[4] + n)[0]; f.contentWindow.document.write(""); f.contentWindow.close(); t.find("." + i[5])[0].removeChild(f) } catch (s) { } t[0].innerHTML = ""; t.remove() } r("#layui-layer-moves, #layui-layer-shade" + n).remove(); layer.ie6 && u.reselect(); u.rescollbar(n); "function" == typeof u.end[n] && u.end[n](); delete u.end[n] } }; layer.closeAll = function (n) { r.each(r("." + i[0]), function () { var t = r(this), i = n ? t.attr("type") === n : 1; i && layer.close(t.attr("times")); i = null }) }; u.run = function () { r = jQuery; f = r(n); i.html = r("html"); layer.open = function (n) { var t = new e(n); return t.index } }; "function" == typeof define ? define(function () { return u.run(), layer }) : function () { u.run(); layer.use("dialog.css") }() }(window)
   </script>
    <script>
    (function (n) { var nt, tt, it, rt, ut, ft, o = {}, h = {}, c = {}, et = { treeId: "", treeObj: null, view: { addDiyDom: null, autoCancelSelected: !0, dblClickExpand: !0, expandSpeed: "fast", fontCss: {}, nameIsHTML: !1, selectedMulti: !0, showIcon: !0, showLine: !0, showTitle: !0 }, data: { key: { children: "children", name: "name", title: "", url: "url" }, simpleData: { enable: !1, idKey: "id", pIdKey: "pId", rootPId: null }, keep: { parent: !1, leaf: !1 } }, async: { enable: !1, contentType: "application/x-www-form-urlencoded", type: "post", dataType: "text", url: "", autoParam: [], otherParam: [], dataFilter: null }, callback: { beforeAsync: null, beforeClick: null, beforeDblClick: null, beforeRightClick: null, beforeMouseDown: null, beforeMouseUp: null, beforeExpand: null, beforeCollapse: null, beforeRemove: null, onAsyncError: null, onAsyncSuccess: null, onNodeCreated: null, onClick: null, onDblClick: null, onRightClick: null, onMouseDown: null, onMouseUp: null, onExpand: null, onCollapse: null, onRemove: null } }, l = [function (n) { var t = n.treeObj, r = i.event; t.bind(r.NODECREATED, function (t, i, r) { u.apply(n.callback.onNodeCreated, [t, i, r]) }); t.bind(r.CLICK, function (t, i, r, f, e) { u.apply(n.callback.onClick, [i, r, f, e]) }); t.bind(r.EXPAND, function (t, i, r) { u.apply(n.callback.onExpand, [t, i, r]) }); t.bind(r.COLLAPSE, function (t, i, r) { u.apply(n.callback.onCollapse, [t, i, r]) }); t.bind(r.ASYNC_SUCCESS, function (t, i, r, f) { u.apply(n.callback.onAsyncSuccess, [t, i, r, f]) }); t.bind(r.ASYNC_ERROR, function (t, i, r, f, e, o) { u.apply(n.callback.onAsyncError, [t, i, r, f, e, o]) }) }], a = [function (n) { var t = i.event; n.treeObj.unbind(t.NODECREATED).unbind(t.CLICK).unbind(t.EXPAND).unbind(t.COLLAPSE).unbind(t.ASYNC_SUCCESS).unbind(t.ASYNC_ERROR) }], v = [function (n) { var i = t.getCache(n); i || (i = {}, t.setCache(n, i)); i.nodes = []; i.doms = [] }], y = [function (n, i, r, f, e, o) { if (r) { var h = t.getRoot(n), s = n.data.key.children; r.level = i; r.tId = n.treeId + "_" + ++h.zId; r.parentTId = f ? f.tId : null; r[s] && r[s].length > 0 ? (typeof r.open == "string" && (r.open = u.eqs(r.open, "true")), r.open = !!r.open, r.isParent = !0, r.zAsync = !0) : (r.open = !1, typeof r.isParent == "string" && (r.isParent = u.eqs(r.isParent, "true")), r.isParent = !!r.isParent, r.zAsync = !r.isParent); r.isFirstNode = e; r.isLastNode = o; r.getParentNode = function () { return t.getNodeCache(n, r.parentTId) }; r.getPreNode = function () { return t.getPreNode(n, r) }; r.getNextNode = function () { return t.getNextNode(n, r) }; r.isAjaxing = !1; t.fixPIdKeyValue(n, r) } }], s = [function (n) { var s = n.target, r = t.getSetting(n.data.treeId), f = "", l = null, e = "", o = "", a = null, c = null, h = null; if (u.eqs(n.type, "mousedown") ? o = "mousedown" : u.eqs(n.type, "mouseup") ? o = "mouseup" : u.eqs(n.type, "contextmenu") ? o = "contextmenu" : u.eqs(n.type, "click") ? u.eqs(s.tagName, "span") && s.getAttribute("treeNode" + i.id.SWITCH) !== null ? (f = u.getNodeMainDom(s).id, e = "switchNode") : (h = u.getMDom(r, s, [{ tagName: "a", attrName: "treeNode" + i.id.A }])) && (f = u.getNodeMainDom(h).id, e = "clickNode") : u.eqs(n.type, "dblclick") && (o = "dblclick", h = u.getMDom(r, s, [{ tagName: "a", attrName: "treeNode" + i.id.A }])) && (f = u.getNodeMainDom(h).id, e = "switchNode"), o.length > 0 && f.length == 0 && (h = u.getMDom(r, s, [{ tagName: "a", attrName: "treeNode" + i.id.A }])) && (f = u.getNodeMainDom(h).id), f.length > 0) switch (l = t.getNodeCache(r, f), e) { case "switchNode": l.isParent ? u.eqs(n.type, "click") || u.eqs(n.type, "dblclick") && u.apply(r.view.dblClickExpand, [r.treeId, l], r.view.dblClickExpand) ? a = nt : e = "" : e = ""; break; case "clickNode": a = tt } switch (o) { case "mousedown": c = it; break; case "mouseup": c = rt; break; case "dblclick": c = ut; break; case "contextmenu": c = ft } return { stop: !1, node: l, nodeEventType: e, nodeEventCallback: a, treeEventType: o, treeEventCallback: c } }], p = [function (n) { var i = t.getRoot(n); i || (i = {}, t.setRoot(n, i)); i[n.data.key.children] = []; i.expandTriggerFlag = !1; i.curSelectedList = []; i.noSelection = !0; i.createdNodes = []; i.zId = 0; i._ver = (new Date).getTime() }], w = [], b = [], k = [], d = [], g = [], t = { addNodeCache: function (n, i) { t.getCache(n).nodes[t.getNodeCacheId(i.tId)] = i }, getNodeCacheId: function (n) { return n.substring(n.lastIndexOf("_") + 1) }, addAfterA: function (n) { b.push(n) }, addBeforeA: function (n) { w.push(n) }, addInnerAfterA: function (n) { d.push(n) }, addInnerBeforeA: function (n) { k.push(n) }, addInitBind: function (n) { l.push(n) }, addInitUnBind: function (n) { a.push(n) }, addInitCache: function (n) { v.push(n) }, addInitNode: function (n) { y.push(n) }, addInitProxy: function (n, t) { t ? s.splice(0, 0, n) : s.push(n) }, addInitRoot: function (n) { p.push(n) }, addNodesData: function (n, t, i) { var u = n.data.key.children; t[u] || (t[u] = []); t[u].length > 0 && (t[u][t[u].length - 1].isLastNode = !1, r.setNodeLineIcos(n, t[u][t[u].length - 1])); t.isParent = !0; t[u] = t[u].concat(i) }, addSelectedNode: function (n, i) { var r = t.getRoot(n); t.isSelectedNode(n, i) || r.curSelectedList.push(i) }, addCreatedNode: function (n, i) { (n.callback.onNodeCreated || n.view.addDiyDom) && t.getRoot(n).createdNodes.push(i) }, addZTreeTools: function (n) { g.push(n) }, exSetting: function (t) { n.extend(!0, et, t) }, fixPIdKeyValue: function (n, t) { n.data.simpleData.enable && (t[n.data.simpleData.pIdKey] = t.parentTId ? t.getParentNode()[n.data.simpleData.idKey] : n.data.simpleData.rootPId) }, getAfterA: function () { for (var n = 0, t = b.length; n < t; n++) b[n].apply(this, arguments) }, getBeforeA: function () { for (var n = 0, t = w.length; n < t; n++) w[n].apply(this, arguments) }, getInnerAfterA: function () { for (var n = 0, t = d.length; n < t; n++) d[n].apply(this, arguments) }, getInnerBeforeA: function () { for (var n = 0, t = k.length; n < t; n++) k[n].apply(this, arguments) }, getCache: function (n) { return c[n.treeId] }, getNextNode: function (n, i) { if (!i) return null; for (var u = n.data.key.children, f = i.parentTId ? i.getParentNode() : t.getRoot(n), r = 0, e = f[u].length - 1; r <= e; r++) if (f[u][r] === i) return r == e ? null : f[u][r + 1]; return null }, getNodeByParam: function (n, i, r, u) { var e; if (!i || !r) return null; for (var o = n.data.key.children, f = 0, s = i.length; f < s; f++) { if (i[f][r] == u) return i[f]; if (e = t.getNodeByParam(n, i[f][o], r, u), e) return e } return null }, getNodeCache: function (n, i) { if (!i) return null; var r = c[n.treeId].nodes[t.getNodeCacheId(i)]; return r ? r : null }, getNodeName: function (n, t) { return "" + t[n.data.key.name] }, getNodeTitle: function (n, t) { return "" + t[n.data.key.title === "" ? n.data.key.name : n.data.key.title] }, getNodes: function (n) { return t.getRoot(n)[n.data.key.children] }, getNodesByParam: function (n, i, r, u) { if (!i || !r) return []; for (var o = n.data.key.children, e = [], f = 0, s = i.length; f < s; f++) i[f][r] == u && e.push(i[f]), e = e.concat(t.getNodesByParam(n, i[f][o], r, u)); return e }, getNodesByParamFuzzy: function (n, i, r, u) { if (!i || !r) return []; for (var o = n.data.key.children, e = [], u = u.toLowerCase(), f = 0, s = i.length; f < s; f++) typeof i[f][r] == "string" && i[f][r].toLowerCase().indexOf(u) > -1 && e.push(i[f]), e = e.concat(t.getNodesByParamFuzzy(n, i[f][o], r, u)); return e }, getNodesByFilter: function (n, i, r, f, e) { var s; if (!i) return f ? null : []; for (var c = n.data.key.children, h = f ? null : [], o = 0, l = i.length; o < l; o++) { if (u.apply(r, [i[o], e], !1)) { if (f) return i[o]; h.push(i[o]) } if (s = t.getNodesByFilter(n, i[o][c], r, f, e), f && s) return s; h = f ? s : h.concat(s) } return h }, getPreNode: function (n, i) { if (!i) return null; for (var u = n.data.key.children, f = i.parentTId ? i.getParentNode() : t.getRoot(n), r = 0, e = f[u].length; r < e; r++) if (f[u][r] === i) return r == 0 ? null : f[u][r - 1]; return null }, getRoot: function (n) { return n ? h[n.treeId] : null }, getRoots: function () { return h }, getSetting: function (n) { return o[n] }, getSettings: function () { return o }, getZTreeTools: function (n) { return (n = this.getRoot(this.getSetting(n))) ? n.treeTools : null }, initCache: function () { for (var n = 0, t = v.length; n < t; n++) v[n].apply(this, arguments) }, initNode: function () { for (var n = 0, t = y.length; n < t; n++) y[n].apply(this, arguments) }, initRoot: function () { for (var n = 0, t = p.length; n < t; n++) p[n].apply(this, arguments) }, isSelectedNode: function (n, i) { for (var u = t.getRoot(n), r = 0, f = u.curSelectedList.length; r < f; r++) if (i === u.curSelectedList[r]) return !0; return !1 }, removeNodeCache: function (n, i) { var u = n.data.key.children, r, f; if (i[u]) for (r = 0, f = i[u].length; r < f; r++) arguments.callee(n, i[u][r]); t.getCache(n).nodes[t.getNodeCacheId(i.tId)] = null }, removeSelectedNode: function (n, i) { for (var u = t.getRoot(n), r = 0, f = u.curSelectedList.length; r < f; r++) i !== u.curSelectedList[r] && t.getNodeCache(n, u.curSelectedList[r].tId) || (u.curSelectedList.splice(r, 1), r--, f--) }, setCache: function (n, t) { c[n.treeId] = t }, setRoot: function (n, t) { h[n.treeId] = t }, setZTreeTools: function () { for (var n = 0, t = g.length; n < t; n++) g[n].apply(this, arguments) }, transformToArrayFormat: function (n, i) { var e, r, f, o; if (!i) return []; if (e = n.data.key.children, r = [], u.isArray(i)) for (f = 0, o = i.length; f < o; f++) r.push(i[f]), i[f][e] && (r = r.concat(t.transformToArrayFormat(n, i[f][e]))); else r.push(i), i[e] && (r = r.concat(t.transformToArrayFormat(n, i[e]))); return r }, transformTozTreeFormat: function (n, t) { var i, e, o = n.data.simpleData.idKey, f = n.data.simpleData.pIdKey, s = n.data.key.children, h, r; if (!o || o == "" || !t) return []; if (u.isArray(t)) { for (h = [], r = [], i = 0, e = t.length; i < e; i++) r[t[i][o]] = t[i]; for (i = 0, e = t.length; i < e; i++) r[t[i][f]] && t[i][o] != t[i][f] ? (r[t[i][f]][s] || (r[t[i][f]][s] = []), r[t[i][f]][s].push(t[i])) : h.push(t[i]); return h } return [t] } }, e = { bindEvent: function () { for (var n = 0, t = l.length; n < t; n++) l[n].apply(this, arguments) }, unbindEvent: function () { for (var n = 0, t = a.length; n < t; n++) a[n].apply(this, arguments) }, bindTree: function (n) { var t = { treeId: n.treeId }, n = n.treeObj; n.bind("selectstart", function (n) { return n = n.originalEvent.srcElement.nodeName.toLowerCase(), n === "input" || n === "textarea" }).css({ "-moz-user-select": "-moz-none" }); n.bind("click", t, e.proxy); n.bind("dblclick", t, e.proxy); n.bind("mouseover", t, e.proxy); n.bind("mouseout", t, e.proxy); n.bind("mousedown", t, e.proxy); n.bind("mouseup", t, e.proxy); n.bind("contextmenu", t, e.proxy) }, unbindTree: function (n) { n.treeObj.unbind("click", e.proxy).unbind("dblclick", e.proxy).unbind("mouseover", e.proxy).unbind("mouseout", e.proxy).unbind("mousedown", e.proxy).unbind("mouseup", e.proxy).unbind("contextmenu", e.proxy) }, doProxy: function () { for (var t, i = [], n = 0, r = s.length; n < r; n++) if (t = s[n].apply(this, arguments), i.push(t), t.stop) break; return i }, proxy: function (n) { var f = t.getSetting(n.data.treeId), i; if (!u.uCanDo(f, n)) return !0; for (var f = e.doProxy(n), r = !0, o = 0, s = f.length; o < s; o++) i = f[o], i.nodeEventCallback && (r = i.nodeEventCallback.apply(i, [n, i.node]) && r), i.treeEventCallback && (r = i.treeEventCallback.apply(i, [n, i.node]) && r); return r } }, u, r; nt = function (n, i) { var f = t.getSetting(n.data.treeId); if (i.open) { if (u.apply(f.callback.beforeCollapse, [f.treeId, i], !0) == !1) return !0 } else if (u.apply(f.callback.beforeExpand, [f.treeId, i], !0) == !1) return !0; return t.getRoot(f).expandTriggerFlag = !0, r.switchNode(f, i), !0 }; tt = function (n, f) { var e = t.getSetting(n.data.treeId), o = e.view.autoCancelSelected && n.ctrlKey && t.isSelectedNode(e, f) ? 0 : e.view.autoCancelSelected && n.ctrlKey && e.view.selectedMulti ? 2 : 1; return u.apply(e.callback.beforeClick, [e.treeId, f, o], !0) == !1 ? !0 : (o === 0 ? r.cancelPreSelectedNode(e, f) : r.selectNode(e, f, o === 2), e.treeObj.trigger(i.event.CLICK, [n, e.treeId, f, o]), !0) }; it = function (n, i) { var r = t.getSetting(n.data.treeId); return u.apply(r.callback.beforeMouseDown, [r.treeId, i], !0) && u.apply(r.callback.onMouseDown, [n, r.treeId, i]), !0 }; rt = function (n, i) { var r = t.getSetting(n.data.treeId); return u.apply(r.callback.beforeMouseUp, [r.treeId, i], !0) && u.apply(r.callback.onMouseUp, [n, r.treeId, i]), !0 }; ut = function (n, i) { var r = t.getSetting(n.data.treeId); return u.apply(r.callback.beforeDblClick, [r.treeId, i], !0) && u.apply(r.callback.onDblClick, [n, r.treeId, i]), !0 }; ft = function (n, i) { var r = t.getSetting(n.data.treeId); return u.apply(r.callback.beforeRightClick, [r.treeId, i], !0) && u.apply(r.callback.onRightClick, [n, r.treeId, i]), typeof r.callback.onRightClick != "function" }; u = { apply: function (n, t, i) { return typeof n == "function" ? n.apply(ot, t ? t : []) : i }, canAsync: function (n, t) { var i = n.data.key.children; return n.async.enable && t && t.isParent && !(t.zAsync || t[i] && t[i].length > 0) }, clone: function (n) { if (n === null) return null; var i = u.isArray(n) ? [] : {}, t; for (t in n) i[t] = n[t] instanceof Date ? new Date(n[t].getTime()) : typeof n[t] == "object" ? arguments.callee(n[t]) : n[t]; return i }, eqs: function (n, t) { return n.toLowerCase() === t.toLowerCase() }, isArray: function (n) { return Object.prototype.toString.apply(n) === "[object Array]" }, $: function (t, i, r) { return i && typeof i != "string" && (r = i, i = ""), typeof t == "string" ? n(t, r ? r.treeObj.get(0).ownerDocument : null) : n("#" + t.tId + i, r ? r.treeObj : null) }, getMDom: function (n, t, i) { if (!t) return null; for (; t && t.id !== n.treeId;) { for (var r = 0, f = i.length; t.tagName && r < f; r++) if (u.eqs(t.tagName, i[r].tagName) && t.getAttribute(i[r].attrName) !== null) return t; t = t.parentNode } return null }, getNodeMainDom: function (t) { return n(t).parent("li").get(0) || n(t).parentsUntil("li").parent().get(0) }, uCanDo: function () { return !0 } }; r = { addNodes: function (n, e, o, s) { if (!n.data.keep.leaf || !e || e.isParent) if (u.isArray(o) || (o = [o]), n.data.simpleData.enable && (o = t.transformTozTreeFormat(n, o)), e) { var h = f(e, i.id.SWITCH, n), c = f(e, i.id.ICON, n), l = f(e, i.id.UL, n); e.open || (r.replaceSwitchClass(e, h, i.folder.CLOSE), r.replaceIcoClass(e, c, i.folder.CLOSE), e.open = !1, l.css({ display: "none" })); t.addNodesData(n, e, o); r.createNodes(n, e.level + 1, o, e); s || r.expandCollapseParentNode(n, e, !0) } else t.addNodesData(n, t.getRoot(n), o), r.createNodes(n, 0, o, null) }, appendNodes: function (n, i, u, f, e, o) { var s, l; if (!u) return []; for (var h = [], a = n.data.key.children, c = 0, v = u.length; c < v; c++) s = u[c], e && (l = (f ? f : t.getRoot(n))[a].length == u.length && c == 0, t.initNode(n, i, s, f, l, c == u.length - 1, o), t.addNodeCache(n, s)), l = [], s[a] && s[a].length > 0 && (l = r.appendNodes(n, i + 1, s[a], s, e, o && s.open)), o && (r.makeDOMNodeMainBefore(h, n, s), r.makeDOMNodeLine(h, n, s), t.getBeforeA(n, s, h), r.makeDOMNodeNameBefore(h, n, s), t.getInnerBeforeA(n, s, h), r.makeDOMNodeIcon(h, n, s), t.getInnerAfterA(n, s, h), r.makeDOMNodeNameAfter(h, n, s), t.getAfterA(n, s, h), s.isParent && s.open && r.makeUlHtml(n, s, h, l.join("")), r.makeDOMNodeMainAfter(h, n, s), t.addCreatedNode(n, s)); return h }, appendParentULDom: function (n, t) { var o = [], e = f(t, n), u; !e.get(0) && t.parentTId && (r.appendParentULDom(n, t.getParentNode()), e = f(t, n)); u = f(t, i.id.UL, n); u.get(0) && u.remove(); u = r.appendNodes(n, t.level + 1, t[n.data.key.children], t, !1, !0); r.makeUlHtml(n, t, o, u.join("")); e.append(o.join("")) }, asyncNode: function (e, o, s, h) { var c, v, a, l, y, p, w; if (o && !o.isParent) return u.apply(h), !1; if (o && o.isAjaxing) return !1; if (u.apply(e.callback.beforeAsync, [e.treeId, o], !0) == !1) return u.apply(h), !1; for (o && (o.isAjaxing = !0, f(o, i.id.ICON, e).attr({ style: "", "class": i.className.BUTTON + " " + i.className.ICO_LOADING })), a = {}, c = 0, v = e.async.autoParam.length; o && c < v; c++) l = e.async.autoParam[c].split("="), y = l, l.length > 1 && (y = l[1], l = l[0]), a[y] = o[l]; if (u.isArray(e.async.otherParam)) for (c = 0, v = e.async.otherParam.length; c < v; c += 2) a[e.async.otherParam[c]] = e.async.otherParam[c + 1]; else for (p in e.async.otherParam) a[p] = e.async.otherParam[p]; return w = t.getRoot(e)._ver, n.ajax({ contentType: e.async.contentType, type: e.async.type, url: u.apply(e.async.url, [e.treeId, o], e.async.url), data: a, dataType: e.async.dataType, success: function (f) { if (w == t.getRoot(e)._ver) { var g = []; try { g = !f || f.length == 0 ? [] : typeof f == "string" ? eval("(" + f + ")") : f } catch (l) { g = f } o && (o.isAjaxing = null, o.zAsync = !0); r.setNodeLineIcos(e, o); g && g !== "" ? (g = u.apply(e.async.dataFilter, [e.treeId, o, g], g), r.addNodes(e, o, g ? u.clone(g) : [], !!s)) : r.addNodes(e, o, [], !!s); e.treeObj.trigger(i.event.ASYNC_SUCCESS, [e.treeId, o, f]); u.apply(h) } }, error: function (n, u, f) { w == t.getRoot(e)._ver && (o && (o.isAjaxing = null), r.setNodeLineIcos(e, o), e.treeObj.trigger(i.event.ASYNC_ERROR, [e.treeId, o, n, u, f])) } }), !0 }, cancelPreSelectedNode: function (n, r) { for (var e = t.getRoot(n).curSelectedList, u = e.length - 1; u >= 0; u--) if ((!r || r === e[u]) && (f(e[u], i.id.A, n).removeClass(i.node.CURSELECTED), r)) { t.removeSelectedNode(n, r); break } r || (t.getRoot(n).curSelectedList = []) }, createNodeCallback: function (n) { var r, f; if (n.callback.onNodeCreated || n.view.addDiyDom) for (r = t.getRoot(n) ; r.createdNodes.length > 0;) f = r.createdNodes.shift(), u.apply(n.view.addDiyDom, [n.treeId, f]), n.callback.onNodeCreated && n.treeObj.trigger(i.event.NODECREATED, [n.treeId, f]) }, createNodes: function (n, u, e, o) { if (e && e.length != 0) { var h = t.getRoot(n), s = n.data.key.children, s = !o || o.open || !!f(o[s][0], n).get(0); h.createdNodes = []; u = r.appendNodes(n, u, e, o, !0, s); o ? (o = f(o, i.id.UL, n), o.get(0) && o.append(u.join(""))) : n.treeObj.append(u.join("")); r.createNodeCallback(n) } }, destroy: function (n) { n && (t.initCache(n), t.initRoot(n), e.unbindTree(n), e.unbindEvent(n), n.treeObj.empty()) }, expandCollapseNode: function (n, e, o, s, h) { var l = t.getRoot(n), c = n.data.key.children, a, h; if (e) if (l.expandTriggerFlag && (a = h, h = function () { a && a(); e.open ? n.treeObj.trigger(i.event.EXPAND, [n.treeId, e]) : n.treeObj.trigger(i.event.COLLAPSE, [n.treeId, e]) }, l.expandTriggerFlag = !1), !e.open && e.isParent && (!f(e, i.id.UL, n).get(0) || e[c] && e[c].length > 0 && !f(e[c][0], n).get(0)) && (r.appendParentULDom(n, e), r.createNodeCallback(n)), e.open == o) u.apply(h, []); else { var o = f(e, i.id.UL, n), l = f(e, i.id.SWITCH, n), v = f(e, i.id.ICON, n); e.isParent ? (e.open = !e.open, e.iconOpen && e.iconClose && v.attr("style", r.makeNodeIcoStyle(n, e)), e.open ? (r.replaceSwitchClass(e, l, i.folder.OPEN), r.replaceIcoClass(e, v, i.folder.OPEN), s == !1 || n.view.expandSpeed == "" ? (o.show(), u.apply(h, [])) : e[c] && e[c].length > 0 ? o.slideDown(n.view.expandSpeed, h) : (o.show(), u.apply(h, []))) : (r.replaceSwitchClass(e, l, i.folder.CLOSE), r.replaceIcoClass(e, v, i.folder.CLOSE), s == !1 || n.view.expandSpeed == "" || !(e[c] && e[c].length > 0) ? (o.hide(), u.apply(h, [])) : o.slideUp(n.view.expandSpeed, h))) : u.apply(h, []) } else u.apply(h, []) }, expandCollapseParentNode: function (n, t, i, u, f) { t && (t.parentTId ? (r.expandCollapseNode(n, t, i, u), t.parentTId && r.expandCollapseParentNode(n, t.getParentNode(), i, u, f)) : r.expandCollapseNode(n, t, i, u, f)) }, expandCollapseSonNode: function (n, i, u, f, e) { var o = t.getRoot(n), h = n.data.key.children, o = i ? i[h] : o[h], h = i ? !1 : f, l = t.getRoot(n).expandTriggerFlag, s, c; if (t.getRoot(n).expandTriggerFlag = !1, o) for (s = 0, c = o.length; s < c; s++) o[s] && r.expandCollapseSonNode(n, o[s], u, h); t.getRoot(n).expandTriggerFlag = l; r.expandCollapseNode(n, i, u, f, e) }, makeDOMNodeIcon: function (n, u, f) { var e = t.getNodeName(u, f), e = u.view.nameIsHTML ? e : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"); n.push("<span id='", f.tId, i.id.ICON, "' title='' treeNode", i.id.ICON, " class='", r.makeNodeIcoClass(u, f), "' style='", r.makeNodeIcoStyle(u, f), "'><\/span><span id='", f.tId, i.id.SPAN, "'>", e, "<\/span>") }, makeDOMNodeLine: function (n, t, u) { n.push("<span id='", u.tId, i.id.SWITCH, "' title='' class='", r.makeNodeLineClass(t, u), "' treeNode", i.id.SWITCH, "><\/span>") }, makeDOMNodeMainAfter: function (n) { n.push("<\/li>") }, makeDOMNodeMainBefore: function (n, t, r) { n.push("<li id='", r.tId, "' class='", i.className.LEVEL, r.level, "' tabindex='0' hidefocus='true' treenode>") }, makeDOMNodeNameAfter: function (n) { n.push("<\/a>") }, makeDOMNodeNameBefore: function (n, f, e) { var h = t.getNodeTitle(f, e), o = r.makeNodeUrl(f, e), c = r.makeNodeFontCss(f, e), l = [], s; for (s in c) l.push(s, ":", c[s], ";"); n.push("<a id='", e.tId, i.id.A, "' class='", i.className.LEVEL, e.level, "' treeNode", i.id.A, ' onclick="', e.click || "", '" ', o != null && o.length > 0 ? "href='" + o + "'" : "", " target='", r.makeNodeTarget(e), "' style='", l.join(""), "'"); u.apply(f.view.showTitle, [f.treeId, e], f.view.showTitle) && h && n.push("title='", h.replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), "'"); n.push(">") }, makeNodeFontCss: function (n, t) { var i = u.apply(n.view.fontCss, [n.treeId, t], n.view.fontCss); return i && typeof i != "function" ? i : {} }, makeNodeIcoClass: function (n, t) { var r = ["ico"]; return t.isAjaxing || (r[0] = (t.iconSkin ? t.iconSkin + "_" : "") + r[0], t.isParent ? r.push(t.open ? i.folder.OPEN : i.folder.CLOSE) : r.push(i.folder.DOCU)), i.className.BUTTON + " " + r.join("_") }, makeNodeIcoStyle: function (n, t) { var i = [], r; return t.isAjaxing || (r = t.isParent && t.iconOpen && t.iconClose ? t.open ? t.iconOpen : t.iconClose : t.icon, r && i.push("background:url(", r, ") 0 0 no-repeat;"), n.view.showIcon != !1 && u.apply(n.view.showIcon, [n.treeId, t], !0) || i.push("width:0px;height:0px;")), i.join("") }, makeNodeLineClass: function (n, t) { var u = []; return n.view.showLine ? t.level == 0 && t.isFirstNode && t.isLastNode ? u.push(i.line.ROOT) : t.level == 0 && t.isFirstNode ? u.push(i.line.ROOTS) : t.isLastNode ? u.push(i.line.BOTTOM) : u.push(i.line.CENTER) : u.push(i.line.NOLINE), t.isParent ? u.push(t.open ? i.folder.OPEN : i.folder.CLOSE) : u.push(i.folder.DOCU), r.makeNodeLineClassEx(t) + u.join("_") }, makeNodeLineClassEx: function (n) { return i.className.BUTTON + " " + i.className.LEVEL + n.level + " " + i.className.SWITCH + " " }, makeNodeTarget: function (n) { return n.target || "_blank" }, makeNodeUrl: function (n, t) { var i = n.data.key.url; return t[i] ? t[i] : null }, makeUlHtml: function (n, t, u, f) { u.push("<ul id='", t.tId, i.id.UL, "' class='", i.className.LEVEL, t.level, " ", r.makeUlLineClass(n, t), "' style='display:", t.open ? "block" : "none", "'>"); u.push(f); u.push("<\/ul>") }, makeUlLineClass: function (n, t) { return n.view.showLine && !t.isLastNode ? i.line.LINE : "" }, removeChildNodes: function (n, u) { var o, e, s, h; if (u && (o = n.data.key.children, e = u[o], e)) { for (s = 0, h = e.length; s < h; s++) t.removeNodeCache(n, e[s]); t.removeSelectedNode(n); delete u[o]; n.data.keep.parent ? f(u, i.id.UL, n).empty() : (u.isParent = !1, u.open = !1, o = f(u, i.id.SWITCH, n), e = f(u, i.id.ICON, n), r.replaceSwitchClass(u, o, i.folder.DOCU), r.replaceIcoClass(u, e, i.folder.DOCU), f(u, i.id.UL, n).remove()) } }, setFirstNode: function (n, t) { var i = n.data.key.children; t[i].length > 0 && (t[i][0].isFirstNode = !0) }, setLastNode: function (n, t) { var i = n.data.key.children, r = t[i].length; r > 0 && (t[i][r - 1].isLastNode = !0) }, removeNode: function (n, u) { var l = t.getRoot(n), s = n.data.key.children, e = u.parentTId ? u.getParentNode() : l, h, a, o; if (u.isFirstNode = !1, u.isLastNode = !1, u.getPreNode = function () { return null }, u.getNextNode = function () { return null }, t.getNodeCache(n, u.tId)) { for (f(u, n).remove(), t.removeNodeCache(n, u), t.removeSelectedNode(n, u), o = 0, h = e[s].length; o < h; o++) if (e[s][o].tId == u.tId) { e[s].splice(o, 1); break } if (r.setFirstNode(n, e), r.setLastNode(n, e), o = e[s].length, n.data.keep.parent || o != 0) { if (n.view.showLine && o > 0) { var c = e[s][o - 1], o = f(c, i.id.UL, n), h = f(c, i.id.SWITCH, n); a = f(c, i.id.ICON, n); e == l ? e[s].length == 1 ? r.replaceSwitchClass(c, h, i.line.ROOT) : (l = f(e[s][0], i.id.SWITCH, n), r.replaceSwitchClass(e[s][0], l, i.line.ROOTS), r.replaceSwitchClass(c, h, i.line.BOTTOM)) : r.replaceSwitchClass(c, h, i.line.BOTTOM); o.removeClass(i.line.LINE) } } else e.isParent = !1, e.open = !1, o = f(e, i.id.UL, n), h = f(e, i.id.SWITCH, n), a = f(e, i.id.ICON, n), r.replaceSwitchClass(e, h, i.folder.DOCU), r.replaceIcoClass(e, a, i.folder.DOCU), o.css("display", "none") } }, replaceIcoClass: function (n, t, r) { if (t && !n.isAjaxing && (n = t.attr("class"), n != void 0)) { n = n.split("_"); switch (r) { case i.folder.OPEN: case i.folder.CLOSE: case i.folder.DOCU: n[n.length - 1] = r } t.attr("class", n.join("_")) } }, replaceSwitchClass: function (n, t, u) { if (t) { var f = t.attr("class"); if (f != void 0) { f = f.split("_"); switch (u) { case i.line.ROOT: case i.line.ROOTS: case i.line.CENTER: case i.line.BOTTOM: case i.line.NOLINE: f[0] = r.makeNodeLineClassEx(n) + u; break; case i.folder.OPEN: case i.folder.CLOSE: case i.folder.DOCU: f[1] = u } t.attr("class", f.join("_")); u !== i.folder.DOCU ? t.removeAttr("disabled") : t.attr("disabled", "disabled") } } }, selectNode: function (n, u, e) { e || r.cancelPreSelectedNode(n); f(u, i.id.A, n).addClass(i.node.CURSELECTED); t.addSelectedNode(n, u) }, setNodeFontCss: function (n, t) { var e = f(t, i.id.A, n), u = r.makeNodeFontCss(n, t); u && e.css(u) }, setNodeLineIcos: function (n, t) { if (t) { var u = f(t, i.id.SWITCH, n), o = f(t, i.id.UL, n), e = f(t, i.id.ICON, n), s = r.makeUlLineClass(n, t); s.length == 0 ? o.removeClass(i.line.LINE) : o.addClass(s); u.attr("class", r.makeNodeLineClass(n, t)); t.isParent ? u.removeAttr("disabled") : u.attr("disabled", "disabled"); e.removeAttr("style"); e.attr("style", r.makeNodeIcoStyle(n, t)); e.attr("class", r.makeNodeIcoClass(n, t)) } }, setNodeName: function (n, r) { var o = t.getNodeTitle(n, r), e = f(r, i.id.SPAN, n); e.empty(); n.view.nameIsHTML ? e.html(t.getNodeName(n, r)) : e.text(t.getNodeName(n, r)); u.apply(n.view.showTitle, [n.treeId, r], n.view.showTitle) && f(r, i.id.A, n).attr("title", o ? o : "") }, setNodeTarget: function (n, t) { f(t, i.id.A, n).attr("target", r.makeNodeTarget(t)) }, setNodeUrl: function (n, t) { var e = f(t, i.id.A, n), u = r.makeNodeUrl(n, t); u == null || u.length == 0 ? e.removeAttr("href") : e.attr("href", u) }, switchNode: function (n, t) { t.open || !u.canAsync(n, t) ? r.expandCollapseNode(n, t, !t.open) : n.async.enable ? r.asyncNode(n, t) || r.expandCollapseNode(n, t, !t.open) : t && r.expandCollapseNode(n, t, !t.open) } }; n.fn.zTree = { consts: { className: { BUTTON: "button", LEVEL: "level", ICO_LOADING: "ico_loading", SWITCH: "switch" }, event: { NODECREATED: "ztree_nodeCreated", CLICK: "ztree_click", EXPAND: "ztree_expand", COLLAPSE: "ztree_collapse", ASYNC_SUCCESS: "ztree_async_success", ASYNC_ERROR: "ztree_async_error" }, id: { A: "_a", ICON: "_ico", SPAN: "_span", SWITCH: "_switch", UL: "_ul" }, line: { ROOT: "root", ROOTS: "roots", CENTER: "center", BOTTOM: "bottom", NOLINE: "noline", LINE: "line" }, folder: { OPEN: "open", CLOSE: "close", DOCU: "docu" }, node: { CURSELECTED: "curSelectedNode" } }, _z: { tools: u, view: r, event: e, data: t }, getZTreeObj: function (n) { return (n = t.getZTreeTools(n)) ? n : null }, destroy: function (n) { if (n && n.length > 0) r.destroy(t.getSetting(n)); else for (var i in o) r.destroy(o[i]) }, init: function (s, h, c) { var l = u.clone(et); return n.extend(!0, l, h), l.treeId = s.attr("id"), l.treeObj = s, l.treeObj.empty(), o[l.treeId] = l, typeof document.body.style.maxHeight == "undefined" && (l.view.expandSpeed = ""), t.initRoot(l), s = t.getRoot(l), h = l.data.key.children, c = c ? u.clone(u.isArray(c) ? c : [c]) : [], s[h] = l.data.simpleData.enable ? t.transformTozTreeFormat(l, c) : c, t.initCache(l), e.unbindTree(l), e.bindTree(l), e.unbindEvent(l), e.bindEvent(l), c = { setting: l, addNodes: function (n, t, i) { function f() { r.addNodes(l, n, e, i == !0) } if (!t || (n || (n = null), n && !n.isParent && l.data.keep.leaf)) return null; var e = u.clone(u.isArray(t) ? t : [t]); return u.canAsync(l, n) ? r.asyncNode(l, n, i, f) : f(), e }, cancelSelectedNode: function (n) { r.cancelPreSelectedNode(l, n) }, destroy: function () { r.destroy(l) }, expandAll: function (n) { return n = !!n, r.expandCollapseSonNode(l, null, n, !0), n }, expandNode: function (n, i, e, o, s) { if (!n || !n.isParent || (i !== !0 && i !== !1 && (i = !n.open), (s = !!s) && i && u.apply(l.callback.beforeExpand, [l.treeId, n], !0) == !1) || s && !i && u.apply(l.callback.beforeCollapse, [l.treeId, n], !0) == !1 || (i && n.parentTId && r.expandCollapseParentNode(l, n.getParentNode(), i, !1), i === n.open && !e)) return null; if (t.getRoot(l).expandTriggerFlag = s, !u.canAsync(l, n) && e) r.expandCollapseSonNode(l, n, i, !0, function () { if (o !== !1) try { f(n, l).focus().blur() } catch (t) { } }); else if (n.open = !i, r.switchNode(this.setting, n), o !== !1) try { f(n, l).focus().blur() } catch (h) { } return i }, getNodes: function () { return t.getNodes(l) }, getNodeByParam: function (n, i, r) { return n ? t.getNodeByParam(l, r ? r[l.data.key.children] : t.getNodes(l), n, i) : null }, getNodeByTId: function (n) { return t.getNodeCache(l, n) }, getNodesByParam: function (n, i, r) { return n ? t.getNodesByParam(l, r ? r[l.data.key.children] : t.getNodes(l), n, i) : null }, getNodesByParamFuzzy: function (n, i, r) { return n ? t.getNodesByParamFuzzy(l, r ? r[l.data.key.children] : t.getNodes(l), n, i) : null }, getNodesByFilter: function (n, i, r, u) { return i = !!i, !n || typeof n != "function" ? i ? null : [] : t.getNodesByFilter(l, r ? r[l.data.key.children] : t.getNodes(l), n, i, u) }, getNodeIndex: function (n) { if (!n) return null; for (var r = l.data.key.children, u = n.parentTId ? n.getParentNode() : t.getRoot(l), i = 0, f = u[r].length; i < f; i++) if (u[r][i] == n) return i; return -1 }, getSelectedNodes: function () { for (var i = [], r = t.getRoot(l).curSelectedList, n = 0, u = r.length; n < u; n++) i.push(r[n]); return i }, isSelectedNode: function (n) { return t.isSelectedNode(l, n) }, reAsyncChildNodes: function (n, u, e) { var o; if (this.setting.async.enable) { if (o = !n, o && (n = t.getRoot(l)), u == "refresh") { for (var u = this.setting.data.key.children, s = 0, h = n[u] ? n[u].length : 0; s < h; s++) t.removeNodeCache(l, n[u][s]); t.removeSelectedNode(l); n[u] = []; o ? this.setting.treeObj.empty() : f(n, i.id.UL, l).empty() } r.asyncNode(this.setting, o ? null : n, !!e) } }, refresh: function () { this.setting.treeObj.empty(); var n = t.getRoot(l), i = n[l.data.key.children]; t.initRoot(l); n[l.data.key.children] = i; t.initCache(l); r.createNodes(l, 0, n[l.data.key.children]) }, removeChildNodes: function (n) { if (!n) return null; var t = n[l.data.key.children]; return r.removeChildNodes(l, n), t ? t : null }, removeNode: function (n, t) { n && (t = !!t, t && u.apply(l.callback.beforeRemove, [l.treeId, n], !0) == !1 || (r.removeNode(l, n), t && this.setting.treeObj.trigger(i.event.REMOVE, [l.treeId, n]))) }, selectNode: function (n, t) { if (n && u.uCanDo(l)) { if (t = l.view.selectedMulti && t, n.parentTId) r.expandCollapseParentNode(l, n.getParentNode(), !0, !1, function () { try { f(n, l).focus().blur() } catch (t) { } }); else try { f(n, l).focus().blur() } catch (i) { } r.selectNode(l, n, t) } }, transformTozTreeNodes: function (n) { return t.transformTozTreeFormat(l, n) }, transformToArray: function (n) { return t.transformToArrayFormat(l, n) }, updateNode: function (n) { n && f(n, l).get(0) && u.uCanDo(l) && (r.setNodeName(l, n), r.setNodeTarget(l, n), r.setNodeUrl(l, n), r.setNodeLineIcos(l, n), r.setNodeFontCss(l, n)) } }, s.treeTools = c, t.setZTreeTools(l, c), s[h] && s[h].length > 0 ? r.createNodes(l, 0, s[h]) : l.async.enable && l.async.url && l.async.url !== "" && r.asyncNode(l), c } }; var ot = n.fn.zTree, f = u.$, i = ot.consts })(jQuery), function (n) { var c, l, a, e = { event: { CHECK: "ztree_check" }, id: { CHECK: "_check" }, checkbox: { STYLE: "checkbox", DEFAULT: "chk", DISABLED: "disable", FALSE: "false", TRUE: "true", FULL: "full", PART: "part", FOCUS: "focus" }, radio: { STYLE: "radio", TYPE_ALL: "all", TYPE_LEVEL: "level" } }, v = { check: { enable: !1, autoCheckTrigger: !1, chkStyle: e.checkbox.STYLE, nocheckInherit: !1, chkDisabledInherit: !1, radioType: e.radio.TYPE_LEVEL, chkboxType: { Y: "ps", N: "ps" } }, data: { key: { checked: "checked" } }, callback: { beforeCheck: null, onCheck: null } }, o, s, h; c = function (n, e) { if (e.chkDisabled === !0) return !1; var o = r.getSetting(n.data.treeId), s = o.data.key.checked; return u.apply(o.callback.beforeCheck, [o.treeId, e], !0) == !1 ? !0 : (e[s] = !e[s], t.checkNodeRelation(o, e), s = f(e, i.id.CHECK, o), t.setChkClass(o, s, e), t.repairParentChkClassWithSelf(o, e), o.treeObj.trigger(i.event.CHECK, [n, o.treeId, e]), !0) }; l = function (n, u) { if (u.chkDisabled === !0) return !1; var e = r.getSetting(n.data.treeId), o = f(u, i.id.CHECK, e); return u.check_Focus = !0, t.setChkClass(e, o, u), !0 }; a = function (n, u) { if (u.chkDisabled === !0) return !1; var e = r.getSetting(n.data.treeId), o = f(u, i.id.CHECK, e); return u.check_Focus = !1, t.setChkClass(e, o, u), !0 }; n.extend(!0, n.fn.zTree.consts, e); n.extend(!0, n.fn.zTree._z, { tools: {}, view: { checkNodeRelation: function (n, u) { var e, o, l, c = n.data.key.children, h = n.data.key.checked, s; if (e = i.radio, n.check.chkStyle == e.STYLE) { if (s = r.getRadioCheckedList(n), u[h]) if (n.check.radioType == e.TYPE_ALL) { for (o = s.length - 1; o >= 0; o--) e = s[o], e[h] = !1, s.splice(o, 1), t.setChkClass(n, f(e, i.id.CHECK, n), e), e.parentTId != u.parentTId && t.repairParentChkClassWithSelf(n, e); s.push(u) } else for (s = u.parentTId ? u.getParentNode() : r.getRoot(n), o = 0, l = s[c].length; o < l; o++) e = s[c][o], e[h] && e != u && (e[h] = !1, t.setChkClass(n, f(e, i.id.CHECK, n), e)); else if (n.check.radioType == e.TYPE_ALL) for (o = 0, l = s.length; o < l; o++) if (u == s[o]) { s.splice(o, 1); break } } else u[h] && (!u[c] || u[c].length == 0 || n.check.chkboxType.Y.indexOf("s") > -1) && t.setSonNodeCheckBox(n, u, !0), !u[h] && (!u[c] || u[c].length == 0 || n.check.chkboxType.N.indexOf("s") > -1) && t.setSonNodeCheckBox(n, u, !1), u[h] && n.check.chkboxType.Y.indexOf("p") > -1 && t.setParentNodeCheckBox(n, u, !0), !u[h] && n.check.chkboxType.N.indexOf("p") > -1 && t.setParentNodeCheckBox(n, u, !1) }, makeChkClass: function (n, t) { var u = n.data.key.checked, r = i.checkbox, e = i.radio, f = "", f = t.chkDisabled === !0 ? r.DISABLED : t.halfCheck ? r.PART : n.check.chkStyle == e.STYLE ? t.check_Child_State < 1 ? r.FULL : r.PART : t[u] ? t.check_Child_State === 2 || t.check_Child_State === -1 ? r.FULL : r.PART : t.check_Child_State < 1 ? r.FULL : r.PART, u = n.check.chkStyle + "_" + (t[u] ? r.TRUE : r.FALSE) + "_" + f, u = t.check_Focus && t.chkDisabled !== !0 ? u + "_" + r.FOCUS : u; return i.className.BUTTON + " " + r.DEFAULT + " " + u }, repairAllChk: function (n, u) { var f; if (n.check.enable && n.check.chkStyle === i.checkbox.STYLE) for (var h = n.data.key.checked, o = n.data.key.children, s = r.getRoot(n), e = 0, c = s[o].length; e < c; e++) f = s[o][e], f.nocheck !== !0 && f.chkDisabled !== !0 && (f[h] = u), t.setSonNodeCheckBox(n, f, u) }, repairChkClass: function (n, u) { if (u && (r.makeChkFlag(n, u), u.nocheck !== !0)) { var e = f(u, i.id.CHECK, n); t.setChkClass(n, e, u) } }, repairParentChkClass: function (n, i) { if (i && i.parentTId) { var r = i.getParentNode(); t.repairChkClass(n, r); t.repairParentChkClass(n, r) } }, repairParentChkClassWithSelf: function (n, i) { if (i) { var r = n.data.key.children; i[r] && i[r].length > 0 ? t.repairParentChkClass(n, i[r][0]) : t.repairParentChkClass(n, i) } }, repairSonChkDisabled: function (n, i, r, u) { var f, e, o; if (i && (f = n.data.key.children, i.chkDisabled != r && (i.chkDisabled = r), t.repairChkClass(n, i), i[f] && u)) for (e = 0, o = i[f].length; e < o; e++) t.repairSonChkDisabled(n, i[f][e], r, u) }, repairParentChkDisabled: function (n, i, r, u) { i && (i.chkDisabled != r && u && (i.chkDisabled = r), t.repairChkClass(n, i), t.repairParentChkDisabled(n, i.getParentNode(), r, u)) }, setChkClass: function (n, i, r) { i && (r.nocheck === !0 ? i.hide() : i.show(), i.removeClass(), i.addClass(t.makeChkClass(n, r))) }, setParentNodeCheckBox: function (n, u, e, o) { var s = n.data.key.children, l = n.data.key.checked, c = f(u, i.id.CHECK, n); if (o || (o = u), r.makeChkFlag(n, u), u.nocheck !== !0 && u.chkDisabled !== !0 && (u[l] = e, t.setChkClass(n, c, u), n.check.autoCheckTrigger && u != o && n.treeObj.trigger(i.event.CHECK, [null, n.treeId, u])), u.parentTId) { if (c = !0, !e) for (var s = u.getParentNode()[s], h = 0, a = s.length; h < a; h++) if (s[h].nocheck !== !0 && s[h].chkDisabled !== !0 && s[h][l] || (s[h].nocheck === !0 || s[h].chkDisabled === !0) && s[h].check_Child_State > 0) { c = !1; break } c && t.setParentNodeCheckBox(n, u.getParentNode(), e, o) } }, setSonNodeCheckBox: function (n, u, e, o) { var h, c, a, l; if (u) { var s = n.data.key.children, v = n.data.key.checked, y = f(u, i.id.CHECK, n); if (o || (o = u), h = !1, u[s]) for (c = 0, a = u[s].length; c < a && u.chkDisabled !== !0; c++) l = u[s][c], t.setSonNodeCheckBox(n, l, e, o), l.chkDisabled === !0 && (h = !0); u != r.getRoot(n) && u.chkDisabled !== !0 && (h && u.nocheck !== !0 && r.makeChkFlag(n, u), u.nocheck !== !0 && u.chkDisabled !== !0 ? (u[v] = e, h) || (u.check_Child_State = u[s] && u[s].length > 0 ? e ? 2 : 0 : -1) : u.check_Child_State = -1, t.setChkClass(n, y, u), n.check.autoCheckTrigger && u != o && u.nocheck !== !0 && u.chkDisabled !== !0 && n.treeObj.trigger(i.event.CHECK, [null, n.treeId, u])) } } }, event: {}, data: { getRadioCheckedList: function (n) { for (var i = r.getRoot(n).radioCheckedList, t = 0, u = i.length; t < u; t++) r.getNodeCache(n, i[t].tId) || (i.splice(t, 1), t--, u--); return i }, getCheckStatus: function (n, t) { if (!n.check.enable || t.nocheck || t.chkDisabled) return null; var r = n.data.key.checked; return { checked: t[r], half: t.halfCheck ? t.halfCheck : n.check.chkStyle == i.radio.STYLE ? t.check_Child_State === 2 : t[r] ? t.check_Child_State > -1 && t.check_Child_State < 2 : t.check_Child_State > 0 } }, getTreeCheckedNodes: function (n, t, u, f) { if (!t) return []; for (var s = n.data.key.children, h = n.data.key.checked, o = u && n.check.chkStyle == i.radio.STYLE && n.check.radioType == i.radio.TYPE_ALL, f = f ? f : [], e = 0, c = t.length; e < c; e++) { if (t[e].nocheck !== !0 && t[e].chkDisabled !== !0 && t[e][h] == u && (f.push(t[e]), o)) break; if (r.getTreeCheckedNodes(n, t[e][s], u, f), o && f.length > 0) break } return f }, getTreeChangeCheckedNodes: function (n, t, i) { if (!t) return []; for (var f = n.data.key.children, e = n.data.key.checked, i = i ? i : [], u = 0, o = t.length; u < o; u++) t[u].nocheck !== !0 && t[u].chkDisabled !== !0 && t[u][e] != t[u].checkedOld && i.push(t[u]), r.getTreeChangeCheckedNodes(n, t[u][f], i); return i }, makeChkFlag: function (n, t) { var e, h, r, u; if (t) { var o = n.data.key.children, s = n.data.key.checked, f = -1; if (t[o]) for (e = 0, h = t[o].length; e < h; e++) if (r = t[o][e], u = -1, n.check.chkStyle == i.radio.STYLE) if (u = r.nocheck === !0 || r.chkDisabled === !0 ? r.check_Child_State : r.halfCheck === !0 ? 2 : r[s] ? 2 : r.check_Child_State > 0 ? 2 : 0, u == 2) { f = 2; break } else u == 0 && (f = 0); else if (n.check.chkStyle == i.checkbox.STYLE) if (u = r.nocheck === !0 || r.chkDisabled === !0 ? r.check_Child_State : r.halfCheck === !0 ? 1 : r[s] ? r.check_Child_State === -1 || r.check_Child_State === 2 ? 2 : 1 : r.check_Child_State > 0 ? 1 : 0, u === 1) { f = 1; break } else if (u === 2 && f > -1 && e > 0 && u !== f) { f = 1; break } else if (f === 2 && u > -1 && u < 2) { f = 1; break } else u > -1 && (f = u); t.check_Child_State = f } } } }); var n = n.fn.zTree, u = n._z.tools, i = n.consts, t = n._z.view, r = n._z.data, f = u.$; r.exSetting(v); r.addInitBind(function (n) { n.treeObj.bind(i.event.CHECK, function (t, i, r, f) { u.apply(n.callback.onCheck, [i ? i : t, r, f]) }) }); r.addInitUnBind(function (n) { n.treeObj.unbind(i.event.CHECK) }); r.addInitCache(function () { }); r.addInitNode(function (n, t, f, e) { f && (t = n.data.key.checked, typeof f[t] == "string" && (f[t] = u.eqs(f[t], "true")), f[t] = !!f[t], f.checkedOld = f[t], typeof f.nocheck == "string" && (f.nocheck = u.eqs(f.nocheck, "true")), f.nocheck = !!f.nocheck || n.check.nocheckInherit && e && !!e.nocheck, typeof f.chkDisabled == "string" && (f.chkDisabled = u.eqs(f.chkDisabled, "true")), f.chkDisabled = !!f.chkDisabled || n.check.chkDisabledInherit && e && !!e.chkDisabled, typeof f.halfCheck == "string" && (f.halfCheck = u.eqs(f.halfCheck, "true")), f.halfCheck = !!f.halfCheck, f.check_Child_State = -1, f.check_Focus = !1, f.getCheckStatus = function () { return r.getCheckStatus(n, f) }, n.check.chkStyle == i.radio.STYLE && n.check.radioType == i.radio.TYPE_ALL && f[t] && r.getRoot(n).radioCheckedList.push(f)) }); r.addInitProxy(function (n) { var t = n.target, o = r.getSetting(n.data.treeId), e = "", h = null, f = "", s = null; if (u.eqs(n.type, "mouseover") ? o.check.enable && u.eqs(t.tagName, "span") && t.getAttribute("treeNode" + i.id.CHECK) !== null && (e = u.getNodeMainDom(t).id, f = "mouseoverCheck") : u.eqs(n.type, "mouseout") ? o.check.enable && u.eqs(t.tagName, "span") && t.getAttribute("treeNode" + i.id.CHECK) !== null && (e = u.getNodeMainDom(t).id, f = "mouseoutCheck") : u.eqs(n.type, "click") && o.check.enable && u.eqs(t.tagName, "span") && t.getAttribute("treeNode" + i.id.CHECK) !== null && (e = u.getNodeMainDom(t).id, f = "checkNode"), e.length > 0) switch (h = r.getNodeCache(o, e), f) { case "checkNode": s = c; break; case "mouseoverCheck": s = l; break; case "mouseoutCheck": s = a } return { stop: f === "checkNode", node: h, nodeEventType: f, nodeEventCallback: s, treeEventType: "", treeEventCallback: null } }, !0); r.addInitRoot(function (n) { r.getRoot(n).radioCheckedList = [] }); r.addBeforeA(function (n, u, f) { n.check.enable && (r.makeChkFlag(n, u), f.push("<span ID='", u.tId, i.id.CHECK, "' class='", t.makeChkClass(n, u), "' treeNode", i.id.CHECK, u.nocheck === !0 ? " style='display:none;'" : "", "><\/span>")) }); r.addZTreeTools(function (n, e) { e.checkNode = function (r, e, o, s) { var h = n.data.key.checked; r.chkDisabled !== !0 && (e !== !0 && e !== !1 && (e = !r[h]), s = !!s, (r[h] !== e || o) && !(s && u.apply(this.setting.callback.beforeCheck, [n.treeId, r], !0) == !1) && u.uCanDo(this.setting) && n.check.enable && r.nocheck !== !0) && (r[h] = e, e = f(r, i.id.CHECK, n), (o || n.check.chkStyle === i.radio.STYLE) && t.checkNodeRelation(n, r), t.setChkClass(n, e, r), t.repairParentChkClassWithSelf(n, r), s && n.treeObj.trigger(i.event.CHECK, [null, n.treeId, r])) }; e.checkAllNodes = function (i) { t.repairAllChk(n, !!i) }; e.getCheckedNodes = function (t) { var i = n.data.key.children; return r.getTreeCheckedNodes(n, r.getRoot(n)[i], t !== !1) }; e.getChangeCheckedNodes = function () { var t = n.data.key.children; return r.getTreeChangeCheckedNodes(n, r.getRoot(n)[t]) }; e.setChkDisabled = function (i, r, u, f) { r = !!r; u = !!u; t.repairSonChkDisabled(n, i, r, !!f); t.repairParentChkDisabled(n, i.getParentNode(), r, u) }; var o = e.updateNode; e.updateNode = function (r, s) { if (o && o.apply(e, arguments), r && n.check.enable && f(r, n).get(0) && u.uCanDo(n)) { var h = f(r, i.id.CHECK, n); (s == !0 || n.check.chkStyle === i.radio.STYLE) && t.checkNodeRelation(n, r); t.setChkClass(n, h, r); t.repairParentChkClassWithSelf(n, r) } } }); o = t.createNodes; t.createNodes = function (n, i, r, u) { o && o.apply(t, arguments); r && t.repairParentChkClassWithSelf(n, u) }; s = t.removeNode; t.removeNode = function (n, i) { var r = i.getParentNode(); s && s.apply(t, arguments); i && r && (t.repairChkClass(n, r), t.repairParentChkClass(n, r)) }; h = t.appendNodes; t.appendNodes = function (n, i, u, f) { var e = ""; return h && (e = h.apply(t, arguments)), f && r.makeChkFlag(n, f), e } }(jQuery), function (n) { var e = { event: { DRAG: "ztree_drag", DROP: "ztree_drop", REMOVE: "ztree_remove", RENAME: "ztree_rename" }, id: { EDIT: "_edit", INPUT: "_input", REMOVE: "_remove" }, move: { TYPE_INNER: "inner", TYPE_PREV: "prev", TYPE_NEXT: "next" }, node: { CURSELECTED_EDIT: "curSelectedNode_Edit", TMPTARGET_TREE: "tmpTargetzTree", TMPTARGET_NODE: "tmpTargetNode" } }, o = { onHoverOverNode: function (n, t) { var r = u.getSetting(n.data.treeId), f = u.getRoot(r); if (f.curHoverNode != t) o.onHoverOutNode(n); f.curHoverNode = t; i.addHoverDom(r, t) }, onHoverOutNode: function (n) { var n = u.getSetting(n.data.treeId), t = u.getRoot(n); t.curHoverNode && !u.isSelectedNode(n, t.curHoverNode) && (i.removeTreeDom(n, t.curHoverNode), t.curHoverNode = null) }, onMousedownNode: function (o, s) { function ot(o) { var d, ot, s, ht, nt, at, wt, lt, ti, st; if (w.dragFlag == 0 && Math.abs(yt - o.clientX) < c.edit.drag.minMoveSize && Math.abs(pt - o.clientY) < c.edit.drag.minMoveSize) return !0; if (nt = c.data.key.children, tt.css("cursor", "pointer"), w.dragFlag == 0) { if (r.apply(c.callback.beforeDrag, [c.treeId, l], !0) == !1) return it(o), !0; for (d = 0, ot = l.length; d < ot; d++) d == 0 && (w.dragNodeShowBefore = []), s = l[d], s.isParent && s.open ? (i.expandCollapseNode(c, s, !s.open), w.dragNodeShowBefore[s.tId] = !0) : w.dragNodeShowBefore[s.tId] = !1; if (w.dragFlag = 1, ct.showHoverDom = !1, r.showIfameMask(c, !0), s = !0, ht = -1, l.length > 1) for (at = l[0].parentTId ? l[0].getParentNode()[nt] : u.getNodes(c), nt = [], d = 0, ot = at.length; d < ot; d++) if (w.dragNodeShowBefore[at[d].tId] !== void 0 && (s && ht > -1 && ht + 1 !== d && (s = !1), nt.push(at[d]), ht = d), l.length === nt.length) { l = nt; break } for (s && (rt = l[0].getPreNode(), ut = l[l.length - 1].getNextNode()), k = f("<ul class='zTreeDragUL'><\/ul>", c), d = 0, ot = l.length; d < ot; d++) if (s = l[d], s.editNameFlag = !1, i.selectNode(c, s, d > 0), i.removeTreeDom(c, s), ht = f("<li id='" + s.tId + "_tmp'><\/li>", c), ht.append(f(s, t.id.A, c).clone()), ht.css("padding", "0"), ht.children("#" + s.tId + t.id.A).removeClass(t.node.CURSELECTED), k.append(ht), d == c.edit.drag.maxShowNodeNum - 1) { ht = f("<li id='" + s.tId + "_moretmp'><a>  ...  <\/a><\/li>", c); k.append(ht); break } k.attr("id", l[0].tId + t.id.UL + "_tmp"); k.addClass(c.treeObj.attr("class")); k.appendTo(tt); p = f("<span class='tmpzTreeMove_arrow'><\/span>", c); p.attr("id", "zTreeMove_arrow_tmp"); p.appendTo(tt); c.treeObj.trigger(t.event.DRAG, [o, c.treeId, l]) } if (w.dragFlag == 1) { a && p.attr("id") == o.target.id && v && o.clientX + b.scrollLeft() + 2 > n("#" + v + t.id.A, a).offset().left ? (s = n("#" + v + t.id.A, a), o.target = s.length > 0 ? s.get(0) : o.target) : a && (a.removeClass(t.node.TMPTARGET_TREE), v && n("#" + v + t.id.A, a).removeClass(t.node.TMPTARGET_NODE + "_" + t.move.TYPE_PREV).removeClass(t.node.TMPTARGET_NODE + "_" + e.move.TYPE_NEXT).removeClass(t.node.TMPTARGET_NODE + "_" + e.move.TYPE_INNER)); v = a = null; g = !1; h = c; s = u.getSettings(); for (wt in s) s[wt].treeId && s[wt].edit.enable && s[wt].treeId != c.treeId && (o.target.id == s[wt].treeId || n(o.target).parents("#" + s[wt].treeId).length > 0) && (g = !0, h = s[wt]); wt = b.scrollTop(); ht = b.scrollLeft(); nt = h.treeObj.offset(); d = h.treeObj.get(0).scrollHeight; s = h.treeObj.get(0).scrollWidth; ot = o.clientY + wt - nt.top; var kt = h.treeObj.height() + nt.top - o.clientY - wt, dt = o.clientX + ht - nt.left, gt = h.treeObj.width() + nt.left - o.clientX - ht; nt = ot < c.edit.drag.borderMax && ot > c.edit.drag.borderMin; var at = kt < c.edit.drag.borderMax && kt > c.edit.drag.borderMin, ni = dt < c.edit.drag.borderMax && dt > c.edit.drag.borderMin, bt = gt < c.edit.drag.borderMax && gt > c.edit.drag.borderMin, kt = ot > c.edit.drag.borderMin && kt > c.edit.drag.borderMin && dt > c.edit.drag.borderMin && gt > c.edit.drag.borderMin, dt = nt && h.treeObj.scrollTop() <= 0, gt = at && h.treeObj.scrollTop() + h.treeObj.height() + 10 >= d, ii = ni && h.treeObj.scrollLeft() <= 0, ri = bt && h.treeObj.scrollLeft() + h.treeObj.width() + 10 >= s; if (o.target.id && h.treeObj.find("#" + o.target.id).length > 0) { for (lt = o.target; lt && lt.tagName && !r.eqs(lt.tagName, "li") && lt.id != h.treeId;) lt = lt.parentNode; for (ti = !0, d = 0, ot = l.length; d < ot; d++) if (s = l[d], lt.id === s.tId) { ti = !1; break } else if (f(s, c).find("#" + lt.id).length > 0) { ti = !1; break } ti && o.target.id && (o.target.id == lt.id + t.id.A || n(o.target).parents("#" + lt.id + t.id.A).length > 0) && (a = n(lt), v = lt.id) } s = l[0]; kt && (o.target.id == h.treeId || n(o.target).parents("#" + h.treeId).length > 0) && (!a && (o.target.id == h.treeId || dt || gt || ii || ri) && (g || !g && s.parentTId) && (a = h.treeObj), nt ? h.treeObj.scrollTop(h.treeObj.scrollTop() - 10) : at && h.treeObj.scrollTop(h.treeObj.scrollTop() + 10), ni ? h.treeObj.scrollLeft(h.treeObj.scrollLeft() - 10) : bt && h.treeObj.scrollLeft(h.treeObj.scrollLeft() + 10), a && a != h.treeObj && a.offset().left < h.treeObj.offset().left && h.treeObj.scrollLeft(h.treeObj.scrollLeft() + a.offset().left - h.treeObj.offset().left)); k.css({ top: o.clientY + wt + 3 + "px", left: o.clientX + ht + 3 + "px" }); nt = d = 0; a && a.attr("id") != h.treeId ? (st = v == null ? null : u.getNodeCache(h, v), ot = o.ctrlKey && c.edit.drag.isMove && c.edit.drag.isCopy || !c.edit.drag.isMove && c.edit.drag.isCopy, d = !!(rt && v === rt.tId), nt = !!(ut && v === ut.tId), ht = s.parentTId && s.parentTId == v, s = (ot || !nt) && r.apply(h.edit.drag.prev, [h.treeId, l, st], !!h.edit.drag.prev), d = (ot || !d) && r.apply(h.edit.drag.next, [h.treeId, l, st], !!h.edit.drag.next), bt = (ot || !ht) && !(h.data.keep.leaf && !st.isParent) && r.apply(h.edit.drag.inner, [h.treeId, l, st], !!h.edit.drag.inner), s || d || bt ? (ot = n("#" + v + t.id.A, a), nt = st.isLastNode ? null : n("#" + st.getNextNode().tId + t.id.A, a.next()), at = ot.offset().top, ht = ot.offset().left, ni = s ? bt ? .25 : d ? .5 : 1 : -1, bt = d ? bt ? .75 : s ? .5 : 0 : -1, o = (o.clientY + wt - at) / ot.height(), (ni == 1 || o <= ni && o >= -.2) && s ? (d = 1 - p.width(), nt = at - p.height() / 2, y = t.move.TYPE_PREV) : (bt == 0 || o >= bt && o <= 1.2) && d ? (d = 1 - p.width(), nt = nt == null || st.isParent && st.open ? at + ot.height() - p.height() / 2 : nt.offset().top - p.height() / 2, y = t.move.TYPE_NEXT) : (d = 5 - p.width(), nt = at, y = t.move.TYPE_INNER), p.css({ display: "block", top: nt + "px", left: ht + d + "px" }), ot.addClass(t.node.TMPTARGET_NODE + "_" + y), (ft != v || et != y) && (vt = (new Date).getTime()), st && st.isParent && y == t.move.TYPE_INNER && (o = !0, window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== st.tId ? (clearTimeout(window.zTreeMoveTimer), window.zTreeMoveTargetNodeTId = null) : window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === st.tId && (o = !1), o) && (window.zTreeMoveTimer = setTimeout(function () { y == t.move.TYPE_INNER && st && st.isParent && !st.open && (new Date).getTime() - vt > h.edit.drag.autoOpenTime && r.apply(h.callback.beforeDragOpen, [h.treeId, st], !0) && (i.switchNode(h, st), h.edit.drag.autoExpandTrigger && h.treeObj.trigger(t.event.EXPAND, [h.treeId, st])) }, h.edit.drag.autoOpenTime + 50), window.zTreeMoveTargetNodeTId = st.tId)) : (a = null, v = "", y = t.move.TYPE_INNER, p.css({ display: "none" }), window.zTreeMoveTimer) && (clearTimeout(window.zTreeMoveTimer), window.zTreeMoveTargetNodeTId = null)) : (y = t.move.TYPE_INNER, a && r.apply(h.edit.drag.inner, [h.treeId, l, null], !!h.edit.drag.inner) ? a.addClass(t.node.TMPTARGET_TREE) : a = null, p.css({ display: "none" }), window.zTreeMoveTimer) && (clearTimeout(window.zTreeMoveTimer), window.zTreeMoveTargetNodeTId = null); ft = v; et = y } return !1 } function it(o) { var rt, ht, ut, nt, d, s; if (window.zTreeMoveTimer && (clearTimeout(window.zTreeMoveTimer), window.zTreeMoveTargetNodeTId = null), et = ft = null, b.unbind("mousemove", ot), b.unbind("mouseup", it), b.unbind("selectstart", st), tt.css("cursor", "auto"), a && (a.removeClass(t.node.TMPTARGET_TREE), v && n("#" + v + t.id.A, a).removeClass(t.node.TMPTARGET_NODE + "_" + t.move.TYPE_PREV).removeClass(t.node.TMPTARGET_NODE + "_" + e.move.TYPE_NEXT).removeClass(t.node.TMPTARGET_NODE + "_" + e.move.TYPE_INNER)), r.showIfameMask(c, !1), ct.showHoverDom = !0, w.dragFlag != 0) { for (w.dragFlag = 0, rt = 0, ht = l.length; rt < ht; rt++) ut = l[rt], ut.isParent && w.dragNodeShowBefore[ut.tId] && !ut.open && (i.expandCollapseNode(c, ut, !ut.open), delete w.dragNodeShowBefore[ut.tId]); k && k.remove(); p && p.remove(); nt = o.ctrlKey && c.edit.drag.isMove && c.edit.drag.isCopy || !c.edit.drag.isMove && c.edit.drag.isCopy; !nt && a && v && l[0].parentTId && v == l[0].parentTId && y == t.move.TYPE_INNER && (a = null); a ? (d = v == null ? null : u.getNodeCache(h, v), r.apply(c.callback.beforeDrop, [h.treeId, l, d, y, nt], !0) == !1 ? i.selectNodes(at, l) : (s = nt ? r.clone(l) : l, rt = function () { if (g) { if (!nt) for (var n = 0, r = l.length; n < r; n++) i.removeNode(c, l[n]); if (y == t.move.TYPE_INNER) i.addNodes(h, d, s); else if (i.addNodes(h, d.getParentNode(), s), y == t.move.TYPE_PREV) for (n = 0, r = s.length; n < r; n++) i.moveNode(h, d, s[n], y, !1); else for (n = -1, r = s.length - 1; n < r; r--) i.moveNode(h, d, s[r], y, !1) } else if (nt && y == t.move.TYPE_INNER) i.addNodes(h, d, s); else if (nt && i.addNodes(h, d.getParentNode(), s), y != t.move.TYPE_NEXT) for (n = 0, r = s.length; n < r; n++) i.moveNode(h, d, s[n], y, !1); else for (n = -1, r = s.length - 1; n < r; r--) i.moveNode(h, d, s[r], y, !1); i.selectNodes(h, s); f(s[0], c).focus().blur(); c.treeObj.trigger(t.event.DROP, [o, h.treeId, s, d, y, nt]) }, y == t.move.TYPE_INNER && r.canAsync(h, d) ? i.asyncNode(h, d, !1, rt) : rt())) : (i.selectNodes(at, l), c.treeObj.trigger(t.event.DROP, [o, c.treeId, l, null, null, null])) } } function st() { return !1 } var d, ht, c = u.getSetting(o.data.treeId), w = u.getRoot(c), ct = u.getRoots(); if (o.button == 2 || !c.edit.enable || !c.edit.drag.isCopy && !c.edit.drag.isMove) return !0; var lt = o.target, nt = u.getRoot(c).curSelectedList, l = []; if (u.isSelectedNode(c, s)) for (d = 0, ht = nt.length; d < ht; d++) { if (nt[d].editNameFlag && r.eqs(lt.tagName, "input") && lt.getAttribute("treeNode" + t.id.INPUT) !== null) return !0; if (l.push(nt[d]), l[0].parentTId !== nt[d].parentTId) { l = [s]; break } } else l = [s]; i.editNodeBlur = !0; i.cancelCurEditNode(c); var b = n(c.treeObj.get(0).ownerDocument), tt = n(c.treeObj.get(0).ownerDocument.body), k, p, a, g = !1, h = c, at = c, rt, ut, ft = null, et = null, v = null, y = t.move.TYPE_INNER, yt = o.clientX, pt = o.clientY, vt = (new Date).getTime(); return r.uCanDo(c) && b.bind("mousemove", ot), b.bind("mouseup", it), b.bind("selectstart", st), o.preventDefault && o.preventDefault(), !0 } }, h, c, y, l, a, v; n.extend(!0, n.fn.zTree.consts, e); n.extend(!0, n.fn.zTree._z, { tools: { getAbs: function (n) { return n = n.getBoundingClientRect(), [n.left + (document.body.scrollLeft + document.documentElement.scrollLeft), n.top + (document.body.scrollTop + document.documentElement.scrollTop)] }, inputFocus: function (n) { n.get(0) && (n.focus(), r.setCursorPosition(n.get(0), n.val().length)) }, inputSelect: function (n) { n.get(0) && (n.focus(), n.select()) }, setCursorPosition: function (n, t) { if (n.setSelectionRange) n.focus(), n.setSelectionRange(t, t); else if (n.createTextRange) { var i = n.createTextRange(); i.collapse(!0); i.moveEnd("character", t); i.moveStart("character", t); i.select() } }, showIfameMask: function (n, t) { for (var e = u.getRoot(n) ; e.dragMaskList.length > 0;) e.dragMaskList[0].remove(), e.dragMaskList.shift(); if (t) for (var s = f("iframe", n), o = 0, c = s.length; o < c; o++) { var i = s.get(o), h = r.getAbs(i), i = f("<div id='zTreeMask_" + o + "' class='zTreeMask' style='top:" + h[1] + "px; left:" + h[0] + "px; width:" + i.offsetWidth + "px; height:" + i.offsetHeight + "px;'><\/div>", n); i.appendTo(f("body", n)); e.dragMaskList.push(i) } } }, view: { addEditBtn: function (n, u) { if (!(u.editNameFlag || f(u, t.id.EDIT, n).length > 0) && r.apply(n.edit.showRenameBtn, [n.treeId, u], n.edit.showRenameBtn)) { var e = f(u, t.id.A, n), o = "<span class='" + t.className.BUTTON + " edit' id='" + u.tId + t.id.EDIT + "' title='" + r.apply(n.edit.renameTitle, [n.treeId, u], n.edit.renameTitle) + "' treeNode" + t.id.EDIT + " style='display:none;'><\/span>"; e.append(o); f(u, t.id.EDIT, n).bind("click", function () { return !r.uCanDo(n) || r.apply(n.callback.beforeEditName, [n.treeId, u], !0) == !1 ? !1 : (i.editNode(n, u), !1) }).show() } }, addRemoveBtn: function (n, u) { if (!(u.editNameFlag || f(u, t.id.REMOVE, n).length > 0) && r.apply(n.edit.showRemoveBtn, [n.treeId, u], n.edit.showRemoveBtn)) { var e = f(u, t.id.A, n), o = "<span class='" + t.className.BUTTON + " remove' id='" + u.tId + t.id.REMOVE + "' title='" + r.apply(n.edit.removeTitle, [n.treeId, u], n.edit.removeTitle) + "' treeNode" + t.id.REMOVE + " style='display:none;'><\/span>"; e.append(o); f(u, t.id.REMOVE, n).bind("click", function () { return !r.uCanDo(n) || r.apply(n.callback.beforeRemove, [n.treeId, u], !0) == !1 ? !1 : (i.removeNode(n, u), n.treeObj.trigger(t.event.REMOVE, [n.treeId, u]), !1) }).bind("mousedown", function () { return !0 }).show() } }, addHoverDom: function (n, t) { u.getRoots().showHoverDom && (t.isHover = !0, n.edit.enable && (i.addEditBtn(n, t), i.addRemoveBtn(n, t)), r.apply(n.view.addHoverDom, [n.treeId, t])) }, cancelCurEditNode: function (n, e) { var s = u.getRoot(n), a = n.data.key.name, o = s.curEditNode; if (o) { var h = s.curEditInput, c = e ? e : h.val(), l = !!e; if (r.apply(n.callback.beforeRename, [n.treeId, o, c, l], !0) === !1) return !1; o[a] = c ? c : h.val(); n.treeObj.trigger(t.event.RENAME, [n.treeId, o, l]); f(o, t.id.A, n).removeClass(t.node.CURSELECTED_EDIT); h.unbind(); i.setNodeName(n, o); o.editNameFlag = !1; s.curEditNode = null; s.curEditInput = null; i.selectNode(n, o, !1) } return s.noSelection = !0 }, editNode: function (n, e) { var s = u.getRoot(n), h, o; i.editNodeBlur = !1; u.isSelectedNode(n, e) && s.curEditNode == e && e.editNameFlag ? setTimeout(function () { r.inputFocus(s.curEditInput) }, 0) : (h = n.data.key.name, e.editNameFlag = !0, i.removeTreeDom(n, e), i.cancelCurEditNode(n), i.selectNode(n, e, !1), f(e, t.id.SPAN, n).html("<input type=text class='rename' id='" + e.tId + t.id.INPUT + "' treeNode" + t.id.INPUT + " >"), o = f(e, t.id.INPUT, n), o.attr("value", e[h]), n.edit.editNameSelectAll ? r.inputSelect(o) : r.inputFocus(o), o.bind("blur", function () { i.editNodeBlur || i.cancelCurEditNode(n) }).bind("keydown", function (t) { t.keyCode == "13" ? (i.editNodeBlur = !0, i.cancelCurEditNode(n)) : t.keyCode == "27" && i.cancelCurEditNode(n, e[h]) }).bind("click", function () { return !1 }).bind("dblclick", function () { return !1 }), f(e, t.id.A, n).addClass(t.node.CURSELECTED_EDIT), s.curEditInput = o, s.noSelection = !1, s.curEditNode = e) }, moveNode: function (n, r, e, o, s, h) { var y = u.getRoot(n), c = n.data.key.children, a, l, v, p; if (r != e && (!n.data.keep.leaf || !r || r.isParent || o != t.move.TYPE_INNER)) { a = e.parentTId ? e.getParentNode() : y; l = r === null || r == y; l && r === null && (r = y); l && (o = t.move.TYPE_INNER); y = r.parentTId ? r.getParentNode() : y; o != t.move.TYPE_PREV && o != t.move.TYPE_NEXT && (o = t.move.TYPE_INNER); o == t.move.TYPE_INNER && (l ? e.parentTId = null : (r.isParent || (r.isParent = !0, r.open = !!r.open, i.setNodeLineIcos(n, r)), e.parentTId = r.tId)); l ? v = l = n.treeObj : (!h && o == t.move.TYPE_INNER ? i.expandCollapseNode(n, r, !0, !1) : h || i.expandCollapseNode(n, r.getParentNode(), !0, !1), l = f(r, n), v = f(r, t.id.UL, n), l.get(0) && !v.get(0) && (v = [], i.makeUlHtml(n, r, v, ""), l.append(v.join(""))), v = f(r, t.id.UL, n)); p = f(e, n); p.get(0) ? l.get(0) || p.remove() : p = i.appendNodes(n, e.level, [e], null, !1, !0).join(""); v.get(0) && o == t.move.TYPE_INNER ? v.append(p) : l.get(0) && o == t.move.TYPE_PREV ? l.before(p) : l.get(0) && o == t.move.TYPE_NEXT && l.after(p); var w = -1, k = 0, b = null, l = null, d = e.level; if (e.isFirstNode) (w = 0, a[c].length > 1) && (b = a[c][1], b.isFirstNode = !0); else if (e.isLastNode) w = a[c].length - 1, b = a[c][w - 1], b.isLastNode = !0; else for (v = 0, p = a[c].length; v < p; v++) if (a[c][v].tId == e.tId) { w = v; break } if (w >= 0 && a[c].splice(w, 1), o != t.move.TYPE_INNER) for (v = 0, p = y[c].length; v < p; v++) y[c][v].tId == r.tId && (k = v); o == t.move.TYPE_INNER ? (r[c] || (r[c] = []), r[c].length > 0 && (l = r[c][r[c].length - 1], l.isLastNode = !1), r[c].splice(r[c].length, 0, e), e.isLastNode = !0, e.isFirstNode = r[c].length == 1) : r.isFirstNode && o == t.move.TYPE_PREV ? (y[c].splice(k, 0, e), l = r, l.isFirstNode = !1, e.parentTId = r.parentTId, e.isFirstNode = !0, e.isLastNode = !1) : r.isLastNode && o == t.move.TYPE_NEXT ? (y[c].splice(k + 1, 0, e), l = r, l.isLastNode = !1, e.parentTId = r.parentTId, e.isFirstNode = !1, e.isLastNode = !0) : (o == t.move.TYPE_PREV ? y[c].splice(k, 0, e) : y[c].splice(k + 1, 0, e), e.parentTId = r.parentTId, e.isFirstNode = !1, e.isLastNode = !1); u.fixPIdKeyValue(n, e); u.setSonNodeLevel(n, e.getParentNode(), e); i.setNodeLineIcos(n, e); i.repairNodeLevelClass(n, e, d); !n.data.keep.parent && a[c].length < 1 ? (a.isParent = !1, a.open = !1, r = f(a, t.id.UL, n), o = f(a, t.id.SWITCH, n), c = f(a, t.id.ICON, n), i.replaceSwitchClass(a, o, t.folder.DOCU), i.replaceIcoClass(a, c, t.folder.DOCU), r.css("display", "none")) : b && i.setNodeLineIcos(n, b); l && i.setNodeLineIcos(n, l); n.check && n.check.enable && i.repairChkClass && (i.repairChkClass(n, a), i.repairParentChkClassWithSelf(n, a), a != e.parent && i.repairParentChkClassWithSelf(n, e)); h || i.expandCollapseParentNode(n, e.getParentNode(), !0, s) } }, removeEditBtn: function (n, i) { f(i, t.id.EDIT, n).unbind().remove() }, removeRemoveBtn: function (n, i) { f(i, t.id.REMOVE, n).unbind().remove() }, removeTreeDom: function (n, t) { t.isHover = !1; i.removeEditBtn(n, t); i.removeRemoveBtn(n, t); r.apply(n.view.removeHoverDom, [n.treeId, t]) }, repairNodeLevelClass: function (n, i, r) { if (r !== i.level) { var u = f(i, n), e = f(i, t.id.A, n), n = f(i, t.id.UL, n), r = t.className.LEVEL + r, i = t.className.LEVEL + i.level; u.removeClass(r); u.addClass(i); e.removeClass(r); e.addClass(i); n.removeClass(r); n.addClass(i) } }, selectNodes: function (n, t) { for (var r = 0, u = t.length; r < u; r++) i.selectNode(n, t[r], r > 0) } }, event: {}, data: { setSonNodeLevel: function (n, t, i) { var r, t, f; if (i && (r = n.data.key.children, i.level = t ? t.level + 1 : 0, i[r])) for (t = 0, f = i[r].length; t < f; t++) i[r][t] && u.setSonNodeLevel(n, i, i[r][t]) } } }); var s = n.fn.zTree, r = s._z.tools, t = s.consts, i = s._z.view, u = s._z.data, f = r.$; u.exSetting({ edit: { enable: !1, editNameSelectAll: !1, showRemoveBtn: !0, showRenameBtn: !0, removeTitle: "remove", renameTitle: "rename", drag: { autoExpandTrigger: !1, isCopy: !0, isMove: !0, prev: !0, next: !0, inner: !0, minMoveSize: 5, borderMax: 10, borderMin: -5, maxShowNodeNum: 5, autoOpenTime: 500 } }, view: { addHoverDom: null, removeHoverDom: null }, callback: { beforeDrag: null, beforeDragOpen: null, beforeDrop: null, beforeEditName: null, beforeRename: null, onDrag: null, onDrop: null, onRename: null } }); u.addInitBind(function (n) { var i = n.treeObj, u = t.event; i.bind(u.RENAME, function (t, i, u, f) { r.apply(n.callback.onRename, [t, i, u, f]) }); i.bind(u.REMOVE, function (t, i, u) { r.apply(n.callback.onRemove, [t, i, u]) }); i.bind(u.DRAG, function (t, i, u, f) { r.apply(n.callback.onDrag, [i, u, f]) }); i.bind(u.DROP, function (t, i, u, f, e, o, s) { r.apply(n.callback.onDrop, [i, u, f, e, o, s]) }) }); u.addInitUnBind(function (n) { var n = n.treeObj, i = t.event; n.unbind(i.RENAME); n.unbind(i.REMOVE); n.unbind(i.DRAG); n.unbind(i.DROP) }); u.addInitCache(function () { }); u.addInitNode(function (n, t, i) { i && (i.isHover = !1, i.editNameFlag = !1) }); u.addInitProxy(function (n) { var c = n.target, s = u.getSetting(n.data.treeId), a = n.relatedTarget, f = "", l = null, e = "", h = null, i = null; if (r.eqs(n.type, "mouseover") ? (i = r.getMDom(s, c, [{ tagName: "a", attrName: "treeNode" + t.id.A }])) && (f = r.getNodeMainDom(i).id, e = "hoverOverNode") : r.eqs(n.type, "mouseout") ? (i = r.getMDom(s, a, [{ tagName: "a", attrName: "treeNode" + t.id.A }]), i || (f = "remove", e = "hoverOutNode")) : r.eqs(n.type, "mousedown") && (i = r.getMDom(s, c, [{ tagName: "a", attrName: "treeNode" + t.id.A }])) && (f = r.getNodeMainDom(i).id, e = "mousedownNode"), f.length > 0) switch (l = u.getNodeCache(s, f), e) { case "mousedownNode": h = o.onMousedownNode; break; case "hoverOverNode": h = o.onHoverOverNode; break; case "hoverOutNode": h = o.onHoverOutNode } return { stop: !1, node: l, nodeEventType: e, nodeEventCallback: h, treeEventType: "", treeEventCallback: null } }); u.addInitRoot(function (n) { var n = u.getRoot(n), t = u.getRoots(); n.curEditNode = null; n.curEditInput = null; n.curHoverNode = null; n.dragFlag = 0; n.dragNodeShowBefore = []; n.dragMaskList = []; t.showHoverDom = !0 }); u.addZTreeTools(function (n, e) { e.cancelEditName = function (t) { var r = u.getRoot(n), f = n.data.key.name, e = r.curEditNode; r.curEditNode && i.cancelCurEditNode(n, t ? t : e[f]) }; e.copyNode = function (u, f, e, o) { if (!f || u && !u.isParent && n.data.keep.leaf && e === t.move.TYPE_INNER) return null; var s = r.clone(f); return u || (u = null, e = t.move.TYPE_INNER), e == t.move.TYPE_INNER ? (f = function () { i.addNodes(n, u, [s], o) }, r.canAsync(n, u) ? i.asyncNode(n, u, o, f) : f()) : (i.addNodes(n, u.parentNode, [s], o), i.moveNode(n, u, s, e, !1, o)), s }; e.editName = function (t) { t && t.tId && t === u.getNodeCache(n, t.tId) && (t.parentTId && i.expandCollapseParentNode(n, t.getParentNode(), !0), i.editNode(n, t)) }; e.moveNode = function (u, e, o, s) { function h() { i.moveNode(n, u, e, o, !1, s) } return e ? u && !u.isParent && n.data.keep.leaf && o === t.move.TYPE_INNER ? null : u && (e.parentTId == u.tId && o == t.move.TYPE_INNER || f(e, n).find("#" + u.tId).length > 0) ? null : (u || (u = null), r.canAsync(n, u) && o === t.move.TYPE_INNER ? i.asyncNode(n, u, s, h) : h(), e) : e }; e.setEditable = function (t) { return n.edit.enable = t, this.refresh() } }); h = i.cancelPreSelectedNode; i.cancelPreSelectedNode = function (n, t) { for (var f = u.getRoot(n).curSelectedList, r = 0, e = f.length; r < e; r++) if ((!t || t === f[r]) && (i.removeTreeDom(n, f[r]), t)) break; h && h.apply(i, arguments) }; c = i.createNodes; i.createNodes = function (n, t, r, u) { c && c.apply(i, arguments); r && i.repairParentChkClassWithSelf && i.repairParentChkClassWithSelf(n, u) }; y = i.makeNodeUrl; i.makeNodeUrl = function (n) { return n.edit.enable ? null : y.apply(i, arguments) }; l = i.removeNode; i.removeNode = function (n, t) { var r = u.getRoot(n); r.curEditNode === t && (r.curEditNode = null); l && l.apply(i, arguments) }; a = i.selectNode; i.selectNode = function (n, t) { var r = u.getRoot(n); return u.isSelectedNode(n, t) && r.curEditNode == t && t.editNameFlag ? !1 : (a && a.apply(i, arguments), i.addHoverDom(n, t), !0) }; v = r.uCanDo; r.uCanDo = function (n, t) { var f = u.getRoot(n); return t && (r.eqs(t.type, "mouseover") || r.eqs(t.type, "mouseout") || r.eqs(t.type, "mousedown") || r.eqs(t.type, "mouseup")) ? !0 : !f.curEditNode && (v ? v.apply(i, arguments) : !0) } }(jQuery), function (n) { var u, f, e, o, s, h, c; n.extend(!0, n.fn.zTree._z, { view: { clearOldFirstNode: function (n, i) { for (var r = i.getNextNode() ; r;) { if (r.isFirstNode) { r.isFirstNode = !1; t.setNodeLineIcos(n, r); break } if (r.isLastNode) break; r = r.getNextNode() } }, clearOldLastNode: function (n, i) { for (var r = i.getPreNode() ; r;) { if (r.isLastNode) { r.isLastNode = !1; t.setNodeLineIcos(n, r); break } if (r.isFirstNode) break; r = r.getPreNode() } }, makeDOMNodeMainBefore: function (n, t, i) { n.push("<li ", i.isHidden ? "style='display:none;' " : "", "id='", i.tId, "' class='", a.className.LEVEL, i.level, "' tabindex='0' hidefocus='true' treenode>") }, showNode: function (n, t) { t.isHidden = !1; i.initShowForExCheck(n, t); r(t, n).show() }, showNodes: function (n, r, u) { var e, o, s, f, h, c; if (r && r.length != 0) { for (e = {}, o = 0, s = r.length; o < s; o++) f = r[o], e[f.parentTId] || (h = f.getParentNode(), e[f.parentTId] = h === null ? i.getRoot(n) : f.getParentNode()), t.showNode(n, f, u); for (c in e) r = e[c][n.data.key.children], t.setFirstNodeForShow(n, r), t.setLastNodeForShow(n, r) } }, hideNode: function (n, u) { u.isHidden = !0; u.isFirstNode = !1; u.isLastNode = !1; i.initHideForExCheck(n, u); t.cancelPreSelectedNode(n, u); r(u, n).hide() }, hideNodes: function (n, r, u) { var e, o, s, f, h, c; if (r && r.length != 0) { for (e = {}, o = 0, s = r.length; o < s; o++) f = r[o], (f.isFirstNode || f.isLastNode) && !e[f.parentTId] && (h = f.getParentNode(), e[f.parentTId] = h === null ? i.getRoot(n) : f.getParentNode()), t.hideNode(n, f, u); for (c in e) r = e[c][n.data.key.children], t.setFirstNodeForHide(n, r), t.setLastNodeForHide(n, r) } }, setFirstNode: function (n, i) { var r = n.data.key.children, u = i[r].length; u > 0 && !i[r][0].isHidden ? i[r][0].isFirstNode = !0 : u > 0 && t.setFirstNodeForHide(n, i[r]) }, setLastNode: function (n, i) { var r = n.data.key.children, u = i[r].length; u > 0 && !i[r][0].isHidden ? i[r][u - 1].isLastNode = !0 : u > 0 && t.setLastNodeForHide(n, i[r]) }, setFirstNodeForHide: function (n, i) { for (var r, u = 0, f = i.length; u < f; u++) { if (r = i[u], r.isFirstNode) break; if (r.isHidden || r.isFirstNode) r = null; else { r.isFirstNode = !0; t.setNodeLineIcos(n, r); break } } return r }, setFirstNodeForShow: function (n, i) { for (var r, u, o, f = 0, e = i.length; f < e; f++) if (r = i[f], u || r.isHidden || !r.isFirstNode) if (u || r.isHidden || r.isFirstNode) { if (u && r.isFirstNode) { r.isFirstNode = !1; o = r; t.setNodeLineIcos(n, r); break } } else r.isFirstNode = !0, u = r, t.setNodeLineIcos(n, r); else { u = r; break } return { "new": u, old: o } }, setLastNodeForHide: function (n, i) { for (var r, u = i.length - 1; u >= 0; u--) { if (r = i[u], r.isLastNode) break; if (r.isHidden || r.isLastNode) r = null; else { r.isLastNode = !0; t.setNodeLineIcos(n, r); break } } return r }, setLastNodeForShow: function (n, i) { for (var r, u, e, f = i.length - 1; f >= 0; f--) if (r = i[f], u || r.isHidden || !r.isLastNode) if (u || r.isHidden || r.isLastNode) { if (u && r.isLastNode) { r.isLastNode = !1; e = r; t.setNodeLineIcos(n, r); break } } else r.isLastNode = !0, u = r, t.setNodeLineIcos(n, r); else { u = r; break } return { "new": u, old: e } } }, data: { initHideForExCheck: function (n, i) { i.isHidden && n.check && n.check.enable && (typeof i._nocheck == "undefined" && (i._nocheck = !!i.nocheck, i.nocheck = !0), i.check_Child_State = -1, t.repairParentChkClassWithSelf && t.repairParentChkClassWithSelf(n, i)) }, initShowForExCheck: function (n, i) { if (!i.isHidden && n.check && n.check.enable) { if (typeof i._nocheck != "undefined" && (i.nocheck = i._nocheck, delete i._nocheck), t.setChkClass) { var u = r(i, a.id.CHECK, n); t.setChkClass(n, u, i) } t.repairParentChkClassWithSelf && t.repairParentChkClassWithSelf(n, i) } } } }); var n = n.fn.zTree, l = n._z.tools, a = n.consts, t = n._z.view, i = n._z.data, r = l.$; i.addInitNode(function (n, t, r) { typeof r.isHidden == "string" && (r.isHidden = l.eqs(r.isHidden, "true")); r.isHidden = !!r.isHidden; i.initHideForExCheck(n, r) }); i.addBeforeA(function () { }); i.addZTreeTools(function (n, i) { i.showNodes = function (i, r) { t.showNodes(n, i, r) }; i.showNode = function (i, r) { i && t.showNodes(n, [i], r) }; i.hideNodes = function (i, r) { t.hideNodes(n, i, r) }; i.hideNode = function (i, r) { i && t.hideNodes(n, [i], r) }; var r = i.checkNode; r && (i.checkNode = function (n) { n && n.isHidden || r.apply(i, arguments) }) }); u = i.initNode; i.tmpHideParent = -1; i.initNode = function (n, r, f, e, o, s) { if (i.tmpHideParent !== e) { i.tmpHideParent = e == null ? -1 : e; var h = (e ? e : i.getRoot(n))[n.data.key.children]; i.tmpHideFirstNode = t.setFirstNodeForHide(n, h); i.tmpHideLastNode = t.setLastNodeForHide(n, h); t.setNodeLineIcos(n, i.tmpHideFirstNode); t.setNodeLineIcos(n, i.tmpHideLastNode) } o = i.tmpHideFirstNode === f; s = i.tmpHideLastNode === f; u && u.apply(i, arguments); s && t.clearOldLastNode(n, f) }; f = i.makeChkFlag; f && (i.makeChkFlag = function (n, t) { t && t.isHidden || f.apply(i, arguments) }); e = i.getTreeCheckedNodes; e && (i.getTreeCheckedNodes = function (n, t) { if (t && t.length > 0) { var r = t[0].getParentNode(); if (r && r.isHidden) return [] } return e.apply(i, arguments) }); o = i.getTreeChangeCheckedNodes; o && (i.getTreeChangeCheckedNodes = function (n, t) { if (t && t.length > 0) { var r = t[0].getParentNode(); if (r && r.isHidden) return [] } return o.apply(i, arguments) }); s = t.expandCollapseSonNode; s && (t.expandCollapseSonNode = function (n, i) { i && i.isHidden || s.apply(t, arguments) }); h = t.setSonNodeCheckBox; h && (t.setSonNodeCheckBox = function (n, i) { i && i.isHidden || h.apply(t, arguments) }); c = t.repairParentChkClassWithSelf; c && (t.repairParentChkClassWithSelf = function (n, i) { i && i.isHidden || c.apply(t, arguments) }) }(jQuery)
    </script>
    <script src="~/Content/iTelluro.js"></script>
    <style>
        html, body {
            height: 100%;
            width: 100%;
            overflow: hidden;
        }
    </style>
</body>
</html>
@*<script>
    var contentPath = '/'.substr(0, '/'.length - 1);
    (function ($, learun) {
        $(function () {
            learun.childInit();
        })
    })(window.jQuery, window.learun)
</script>*@

<script src="/Content/scripts/plugins/zip/pako.min.js"></script>
<script src="/Content/scripts/plugins/districts/multiDistricts.js"></script>
<script src="/Content/scripts/plugins/charts/Chart.js"></script>
<script src="/Content/scripts/plugins/jquery-range/jquery.range.js"></script>
<script>
    var formData;//表单数据
    var chutuData = {};//出图图层数据
    var zhituData = {};//制图参数数据
    var userid = $.cookie('Token').split(',')[1];

    var district = null;
    var mapCtlExt = null;
    //图层树
    var treeObj = null;
    var layerTree = {
        elementid: 'layerTree',
        data: [],   //图层数据
        obj: null,
        setting: {
            callback: {
                onAsyncError: null,
                onAsyncSuccess: null,
                beforeExpand: function () { },
                onExpand: function () { },
                onCheck: function (event, ids, node) {
                    console.log(node);
                    checkLinkage(node);
                    var _currentServer = null;
                    var _currentIndex = node.currentLayerIndex ? node.currentLayerIndex : 0;
                    if (!node.isParent) {
                        _currentServer = node.serverList[_currentIndex];
                        checkedNodeAddLayer(node, _currentServer);
                    } else {
                        if (node.children.length == 0) { return; };
                        node.children.forEach(function (childNode) {
                            _currentServer = childNode.serverList[_currentIndex];
                            checkedNodeAddLayer(childNode, _currentServer);
                        });
                    };
                    if (node.checked == false) {
                        $(".mygdt,#server-address,.tools-group,#spatial_query_html").hide();
                    };
                },
                onClick: function (event, ids, node) {
                    if (node.checked == false) {
                        $(".mygdt").hide();
                    } else {
                        if (node.isParent) { event.stopPropagation(); return; };
                        //显示图例
                        if (node.cutlinePath && node.cutlineNum && node.cutlineNum != "0") {
                            $(".mygdt").show();
                            var imgID = "", imgURL = "", legends = [];
                            if (node.serverType == "iTelluro") {
                                imgURL = node.cutlinePath;
                                legends = [{ url: imgURL }];
                            } else {
                                imgID = node.cutlineNum;
                                imgURL = node.cutlinePath;
                                legends = [];
                                //var imgval = me.map3d.layerCutlineNgac(imgurl, imgID);
                                //for (var i = 0; i < imgval.length; i++) {
                                //    legends.push({ url: imgval[i] });
                                //}
                                legends.push({ url: imgURL });
                            };
                            getLegends(legends);
                        } else {
                            $(".mygdt").hide();
                        };
                        //显示服务列表
                        getLayerServerList(node);
                        //顶部工具条及相关功能
                        var _currentIndex = node.currentLayerIndex ? node.currentLayerIndex : 0;
                        initTopTools(node, _currentIndex);
                    };
                },
                onCollapse: function () { }
            },
            check: {
                enable: true,
                autoCheckTrigger: true,
                chkStyle: "checkbox",
                chkboxType: { "Y": "", "N": "" }
            },
            data: {
                key: {
                    name: "label",
                    checked: "checked"
                }
            },
            view: {
                fontCss: { "color": "white", "font-family": "Microsoft YaHei,Helvetica,Arial,sans-serif" },
                showLine: false,
                showIcon: true,
                dblClickExpand: false,
                txtSelectedEnable: true
            }
        }
    };

    $(function () {
        InitialPage();
        InitlayerTree("");
        initMap();
        $('#mapControl').find(".sidebar-showon").hide();
        $('#mapControl').find(".ui-layout-west").hide();
        if ($("#map_layout").find(".ui-layout-west").css("display") == "none") {
            $("#mapControl").find(".mapDiv").width($("#mapControl").width());
            mapCtlExt.getMap().updateSize();
        }
        $(".collapse").on("shown.bs.collapse", function () {
            $('.tab-content').find(".ztree-wrap").height($('.ztree-wrap').height() - 135);
        }).on("hide.bs.collapse", function () {
            $('.tab-content').find(".ztree-wrap").height($('.ztree-wrap').height() + 135);
        });
        $("#SCtype").ComboBoxSetValue(500000);
        //框选点击事件
        $("#kuangxuan").click(function () {
            //绘制
            mapCtlExt.customDraw("Box", function (feature, drawTool) {
                var extent = feature.getGeometry().getExtent();
                $("#latitude_N").val(extent[3]);
                $("#latitude_S").val(extent[1]);
                $("#longitude_W").val(extent[0]);
                $("#longitude_E").val(extent[2]);
                //移除之前的绘制对象，结束绘制
                mapCtlExt.getMap().removeInteraction(drawTool);
            });
        });
        //清除框选
        $(".btn-clear").click(function () {
            mapCtlExt.clearRectLayer();
            $("#latitude_N").val(0);
            $("#latitude_S").val(0);
            $("#longitude_W").val(0);
            $("#longitude_E").val(0);
        });
        //是否采用标准图幅
        var areaCheck = $("#area-check");
        var formartCheck = $("#formart-check");
        var BoxAreaWrap = $("#drawing-output").find(".box-area-wrap");
        var FormartWrap = $("#drawing-output").find(".formart-wrap");
        ListenCheck(areaCheck, BoxAreaWrap, FormartWrap, formartCheck);
        ListenCheck(formartCheck, FormartWrap, BoxAreaWrap, areaCheck);
        //资源目录查询
        $("#query_btn").click(function () {
            queryByKeyword();
        });
        //高级查询
        $("#advanced_query").click(function () {
            var districtValue = district.getDistrictValue();
            var districtSelectedArr = districtValue.xzqhcode ? districtValue.xzqhcode.split(",") : null;
            var districtSelected = replaceCode(districtSelectedArr);
            if (!districtSelected || districtSelected.length === 0) { return; };
            var ranges = [];
            for (var i = 0; i < districtSelected.length; i++) {
                var a = countyRangeMap[districtSelected[i]];
                if (a) {
                    ranges = ranges.concat(a);
                }
            };
            if (ranges.length === 0) { return; };
            var rect = ranges;
            filterData(rect, treeObj);
            //处理二级菜单选到直辖市的bug
            function replaceCode(arr) {
                if (arr) {
                    arr.forEach(function (code, index) {
                        if (code == "110100") {
                            arr.splice(index, 1, "110000");
                        } else if (code == "120100") {
                            arr.splice(index, 1, "120000");
                        } else if (code == "310100") {
                            arr.splice(index, 1, "310000");
                        } else if (code == "500100") {
                            arr.splice(index, 1, "500000");
                        }
                    });
                }
                return arr;
            };
        });
        //重置
        $("#reset_query").click(function () {
            district.resetDistrict();
            queryByKeyword();
        });

        //联动
        var isLink = false;
        $("#map_link").click(function () {
            isLink = !isLink;
            if (isLink) {
                $(this).removeClass("btn-primary").addClass("btn-success");
                $(this).find("img").attr("src", "/Content/images/关联.png").attr("title", "地图联动关联中");
            } else {
                $(this).removeClass("btn-success").addClass("btn-primary");
                $(this).find("img").attr("src", "/Content/images/取消关联.png").attr("title", "地图联动关闭中");
                queryByKeyword();
            };
            function mapLink() {
                if (!isLink) { return; };
                var map = mapCtlExt.getMap();
                var mapExtent = map.getView().calculateExtent(map.getSize());
                var extent = [{
                    east: mapExtent[2],
                    north: mapExtent[3],
                    south: mapExtent[1],
                    west: mapExtent[0]
                }];
                filterData(extent, treeObj);
            };
            mapLink();
            mapCtlExt.getMap().getView().on("change:resolution", mapLink);
        });

        //提交点击事件
        $("#submit_form").click(function () {
            formData = getFormData();
            if (!formData.DrawingName) {
                learun.dialogAlert({ msg: "制图名称不能为空！", type: -1 });
                return false;
            };
            if (formData.East == 0 || formData.North == 0 || formData.South == 0 || formData.West == 0) {
                learun.dialogAlert({ msg: "框选范围不能为空！", type: -1 });
                return false;
            };
            if (!chutuData || !chutuData.layerList) {
                learun.dialogAlert({ msg: "图层不能为空！", type: -1 });
                return false;
            };
            formData.UserId = userid;//用户名
            formData.Layers = chutuData.layerList;//图层
            formData.IsIconOverlay = chutuData.IsIconOverlay;//标注是否允许重叠

            if ($("#formart-check").prop("checked")) {
                formData.TFBH = $("#formart_num").val();
            } else {
                if (zhituData.basic) {
                    formData.TFBH = zhituData.basic.TFBH;//图幅号
                }
            };
            if (zhituData.basic) {
                formData.GeoSystem = zhituData.basic.GeoSystem;//生成成果文件的坐标系
                formData.ResponsibilityTableInfomation = zhituData.basic.ResponsibilityTableInfomation;//责任人信息
                formData.Resolution = zhituData.basic.Resolution;//出图分辨率
            };
            formData.LengendInfo = zhituData.legend;//图例
            if (zhituData.scale) {
                formData.NorthArrowInfo = zhituData.scale.NorthArrowInfo;//指北针
                formData.ScaleBarInfo = zhituData.scale.ScaleBarInfo;//制图参数比例尺
            };

            formData.IconInfos = null;//Icon信息集合
            formData.PolygonInfos = getCustomFeatures();//矢量面集合
            formData.LabelInfos = null;//标注信息集合
            formData.WKTString = "";//WKT串
            formData.WKTScale = "";
            formData.AreaCode = "";//行政区划Code

            //console.log("提交", formData);

            //提交数据
            learun.loading({ isShow: true, text: "正在提交数据..." });
            window.setTimeout(function () {
                $.ajax({
                    url: "../../DrawingOutputManage/DrawingOutput/SaveDrawingInfo",
                    data: formData,
                    type: "post",
                    dataType: "json",
                    async: false,
                    success: function (data) {
                        $("#drawing_name").val("");//提交后清空制图输出名称
                        learun.loading({ isShow: false });
                        var _content = '<div style="text-align:center;padding:20px;"><p>提交成功！</p><p>正在出图，请耐心等待！</p><p>如需了解出图进度，可进入历史列表查看！</p></div>';
                        layer.open({
                            type: 1,
                            skin: 'layui-layer-rim',
                            area: ['330px', '180px'],
                            btn: ['进入历史列表', '取消'],
                            title: '提示',
                            content: _content,
                            yes: function (index, layero) {
                                getHistoryList();
                                layer.close(index);
                            }
                        });
                    }
                });
            }, 500);
        });
    });

    //初始化页面
    function InitialPage() {
        //layout布局
        //$('#layout').layout({
        //    applyDemoStyles: true,
        //    onresize: function () {
        //        if (isResize < 10) {
        //            isResize++;
        //        }
        //        reSize();
        //    }
        //}).sizePane('west', 285);
        $('#layout>.ui-layout-west').find(".tab-content").height($('#layout>.ui-layout-west').find(".west-Panel").height() - 35);
        $('#layout>.ui-layout-west').find(".tab-content").find(".ztree-wrap").height($('#layout>.ui-layout-west').find(".tab-content").height() - 81);
        //resize重设布局;
        var isResize = 0;
        $(window).resize(function (e) {
            if (isResize < 10) {
                isResize++;
            }
            reSize();
            e.stopPropagation();
        });
        $(window).resize();
        //比例尺类型
        $("#SCtype").ComboBox({
            data: eval("([{'text':'50万-1:500000','value':'500000'},{'text':'25万-1:250000','value':'250000'},{'text':'10万-1:100000','value':'100000'},{'text':'5万-1:50000','value':'50000'},{'text':'2.5万-1:25000','value':'25000'},{'text':'1万-1:10000','value':'10000'},{'text':'5千-1:5000','value':'5000'},{'text':'2千-1:2000','value':'2000'},{'text':'1千-1:1000','value':'1000'},{'text':'5百-1:500','value':'500'}])"),
            id: "value",
            text: "text",
            height: '200px',
            selectOne: true,
            description: ""
        }).bind("change", function () {
            //选择之后触发点事件
            var value = $(this).attr('data-value');
            var scale = Number(value);
            var ret = GetTileLevel(scale, 36, 6378137, 300);
            //console.log('Debug:  ret ', ret);
            mapCtlExt.getMap().getView().setZoom(ret - 7);
            calculateFormart();
            var _North = $("#latitude_N").val();
            var _South = $("#latitude_S").val();
            var _West = $("#longitude_W").val();
            var _East = $("#longitude_E").val();
            var LongitudeTf = Number((_East + _West) / 2);
            var LatitudeTf = Number((_North + _South) / 2);
            if (LongitudeTf && LatitudeTf) {
                mapCtlExt.getMap().getView().animate({ center: [LongitudeTf, LatitudeTf], duration: 1500 });
            }
        });
        $(".search-term").find("button[data-toggle='collapse']").click(function () {
            var expanded = $(this).attr("aria-expanded");
            if (expanded == "false") {
                $(this).find("span").removeClass("fa-plus").addClass("fa-minus");
            } else {
                $(this).find("span").removeClass("fa-minus").addClass("fa-plus");
            }
        });
        //行政区划
        var html = '<div class="mic-col" style="display:flex;margin:5px 0;">' +
                       '<label class="mic-col-label" style="flex:1;line-height:28px;">省：</label>' +
                       '<div class="mic-col-ipt" style="flex:9;"><div id="PROVINCE" multiples="true" type="select" class="ui-select" style="width: 100%;" ></div></div>' +
                   '</div>' +
                   '<div class="mic-col" style="display:flex;margin:5px 0;">' +
                       '<label class="mic-col-label" style="flex:1;line-height:28px;">市：</label>' +
                       '<div  class="mic-col-ipt" style="flex:9;"><div id="CITY" multiples="true" type="select" class="ui-select" style="width: 100%;"></div></div>' +
                   '</div>' +
                   '<div class="mic-col" style="display:flex;margin:5px 0;">' +
                       '<label class="mic-col-label" style="flex:1;line-height:28px;">区：</label>' +
                       '<div  class="mic-col-ipt" style="flex:9;"><div id="COUNTY" multiples="true" type="select" class="ui-select" style="width: 100%;"></div></div>' +
                   '</div>';
        district = $("#districtsCtls").mulDistrictsCtl({
            //provinceId: accesscode,
            //selectProviceId: accesscode,
            selectCityId: "",
            selectCounty: "",
            html: html,
            type: 'B',
        });
    };

    function reSize() {
        window.setTimeout(function () {
            if (mapCtlExt != null) {
                mapCtlExt.setVEHeight($("#mapControl").parent().height() - 32 - 4);
                $("#mapControl").find(".mapDiv").width($("#mapControl").width());
                mapCtlExt.getMap().updateSize();
                mapCtlExt.resetMapBtnPosition();
            }
            $(".center-Panel").height($("#layout").parent().height() - 20);
        }, 100);
    };
    //关键字查询
    function queryByKeyword() {
        var keyWord = $("#search-input").val();
        InitlayerTree(keyWord);
    };
    //高级查询过滤
    function filterData(rect, treeObj) {
        if (!!rect && !!treeObj) {
            var nodes = treeObj.getNodes();
            function isAll(node) {
                if (node && node.children && node.children.length > 0) {
                    for (var i in node.children) {
                        var cnode = node.children[i];
                        if (!cnode.isParent) {
                            if (cnode.range && cnode.range.east) {
                                var isIntersect = $.isArray(rect) ? mapCtlExt.IsBIntersectRects(rect, cnode.range) : mapCtlExt.IsIntersectRect(rect, cnode.range);
                                if (!isIntersect) {
                                    treeObj.hideNode(cnode);
                                } else {
                                    treeObj.showNode(cnode);
                                }
                            } else {
                                treeObj.hideNode(cnode);
                            }
                        }
                        isAll(cnode);
                    }
                }
            };
            for (var j in nodes) {
                isAll(nodes[j]);
            };
            creatNodeNum(nodes);
            treeObj.refresh();
        };
    };
    //绑定树
    function bindTreeData(tree) {
        tree.obj = $.fn.zTree.init($("#" + tree.elementid), tree.setting, tree.data);
        tree.obj.cancelSelectedNode();
        treeObj = tree.obj;
    };
    //创建树节点
    function treeCreate(newData) {
        var nodelist = [];
        for (var i in newData.directoryInfo) {
            var item = newData.directoryInfo[i];
            var treeNode2 = {};
            treeNode2.id = item.GUID;
            treeNode2.parentId = item.CATID;
            treeNode2.label = item.FILENAME;
            treeNode2.value = item.SERVERADDRESS;
            treeNode2.title = item.SERVERTYPE;
            treeNode2.cutlinePath = item.CUTLINEPATH;
            treeNode2.cutlineNum = item.CUTLINENUM;
            treeNode2.IsSpatalQuery = item.IsSpatalQuery;
            treeNode2.currentLayerIndex = null;

            treeNode2.isParent = false;
            treeNode2.checked = false;
            treeNode2.fileType = item.FILETYPE;
            treeNode2.serverType = item.SERVERTYPE;
            treeNode2.num = item.NUM * 1;  //图层序号
            treeNode2.serverList = item.list;
            if (treeNode2.serverList && treeNode2.serverList.length > 0) {
                treeNode2.serverList.forEach(function (serverItem, index) {
                    serverItem.SERVERDESC = !!serverItem.SERVERDESC ? serverItem.SERVERDESC : serverItem.SERVERTYPE + '服务';
                    serverItem.REQUESTTYPE = !!serverItem.REQUESTTYPE ? serverItem.REQUESTTYPE : 'GET';
                    serverItem.ACTIVEINDEX = index;
                });
            };
            treeNode2.isCGCS2000 = item.SPATIALREFERENCE == "CGCS2000" ? true : false; //是否为CGCS2000坐标系
            treeNode2.range = {
                west: item.WESTLONGITUDE,
                south: item.SOUTHLATITUDE,
                east: item.EASTLONGITUDE,
                north: item.NORTHLATITUDE
            };
            nodelist.push(treeNode2);
        }
        var nodeParent = [];
        var nodeAll = [];
        for (var i in newData.catalog) {
            var item = newData.catalog[i];
            var parentNode = {
                id: item.CATID,
                parentId: item.PARENTCATID,
                label: item.CATNAME,
                value: item.CATNAME,
                title: "",
                isParent: true,
                // iconOpen: "/Content/images/wjj1.png",
                // iconClose: "/Content/images/wjj2.png",
                checked: false,
                nocheck: true,
                children: []
            };
            nodeAll.push(parentNode);
            if (parentNode.parentId == "0") {
                nodeParent.push(parentNode);
            }
        }
        for (var node1 in nodeAll) {
            for (var node2 in nodeAll) {
                if (nodeAll[node1].parentId == nodeAll[node2].id) {
                    if (nodeAll[node2].children) {
                        nodeAll[node2].children.push(nodeAll[node1]);
                    }

                }
            }
            for (var node3 in nodelist) {
                if (nodelist[node3].parentId == nodeAll[node1].id) {
                    if (nodeAll[node1].children) {
                        nodeAll[node1].children.push(nodelist[node3]);
                    }

                }
            }
        }
        return nodeParent;
    };
    //解压
    function decodeByGzip(encodedData) {
        var decodedData = window.atob(encodedData.Result);
        var charData = decodedData.split('').map(function (x) { return x.charCodeAt(0); });
        var binData = new Uint8Array(charData);

        restored = pako.ungzip(binData, { to: 'string' }); // 解
        return restored;

        var data = pako.inflate(binData);

        var res = '';
        var chunk = 8 * 1024;
        var i;
        for (i = 0; i < data.length / chunk; i++) {
            res += String.fromCharCode.apply(null, data.slice(i * chunk, (i + 1) * chunk));
        }
        res += String.fromCharCode.apply(null, data.slice(i * chunk));
        return res;
        function b64_to_utf8(str) {
            return decodeURIComponent(escape(window.atob(str)));
        }
    };
    //生成树形统计
    function creatNodeNum(nodes) {
        var ret = nodes ? nodes : layerTree.data;
        //递归
        function _rec(arr, fun, pid) {
            for (var i = 0; i < arr.length; i++) {
                var id = arr[i].id, pidArr;
                if (!pid) {
                    pid = [id];
                } else {
                    pidArr = pid;
                    if (i > 0) {
                        pid.splice(pid.length - 1, 1);
                    }
                    pid = pid.concat([id]);
                }
                fun(arr[i], pidArr);
                if (arr[i].children && arr[i].children.length > 0) {
                    //如果子节点是叶子，设置父节点有选项框
                    if (!arr[i].children[0].isParent && (!arr[i].children[0].children || arr[i].children[0].children.length === 0)) {
                        arr[i].nocheck = false;
                    }
                    _rec(arr[i].children, fun, pid);
                }
            }
        };
        var _arr = [], _tmpobj = {}, nn = 1;
        _rec(ret, function (dt, pidArr) {
            //如果是父节点又没有子节点则隐藏
            if (dt.isParent && (!dt.children || dt.children.length === 0)) {
                dt.isHidden = true;
            }
            if (pidArr && !dt.isParent && !dt.isHidden && (!dt.children || dt.children.length === 0)) {
                _arr = _arr.concat(pidArr);
            }
            if (!dt.children || dt.children.length === 0) {
                //dt.layerIndex = nn;
                nn++;
            }
        });
        for (var n = 0; n < _arr.length; n++) {
            if (!_tmpobj[_arr[n]]) {
                _tmpobj[_arr[n]] = 0;
            }
            _tmpobj[_arr[n]]++;
        }
        _rec(ret, function (dt) {
            if (_tmpobj[dt.id]) {
                if (!!nodes) {
                    var regx = /\(([\S]*)\)/;
                    var ex = regx.exec(dt.label);
                    if (ex) {
                        dt.label = dt.label.replace('(' + ex[1] + ')', '(' + _tmpobj[dt.id] + ')');
                    }
                } else {
                    dt.label += '(' + _tmpobj[dt.id] + ')';
                }
            } else if (!!nodes) {
                var regx = /\(([\S]*)\)/;
                var ex = regx.exec(dt.label);
                if (ex) {
                    dt.label = dt.label.replace('(' + ex[1] + ')', '');
                }
            }
            if (!dt.children || dt.children.length === 0) {
                dt.layerIndex = nn;
                nn--;
            }
        });
        _rec(ret, function (dt) {
            if (dt.isParent && dt.label.indexOf(')') === -1) {
                dt.isHidden = true;
            }
        });
    };
    //初始化图层树
    function InitlayerTree(keyWord) {
        layerTree.data = [];
        var url = "http://192.168.1.46:8050/" + "api/tbl_md_catalogApi/GetTreeData?value=1&keyWord=" + keyWord;
        var token = $.cookie('Token').split(',')[0];
        var Atoken = $.md5(token).toUpperCase();
        //var Atoken = "44BEF1EEDEEC54E37A17B0B586EB5161";

        var id = "layerinfoTree";

        $.ajax({
            url: url,
            type: 'GET',
            headers: { Authorization: Atoken }
        })
        .done(function (data) {
            //console.log(data);
            var d = decodeByGzip(data);
            var newData = JSON.parse(d);
            layerTree.data = treeCreate(newData);
            var businessData = getBusinessData();
            if (businessData && businessData.length > 0) {
                businessData.forEach(function (item) {
                    layerTree.data.push(item);
                });
            };
            creatNodeNum();
            bindTreeData(layerTree);
        });
    };

    //加载地图
    function initMap() {
        var config = getInfoTop().learun.data.get(["globalConfig"]);
        mapCtlExt = $("#mapControl").mapVectorEditorCtl({
            mapWidth: 1500,
            mapHeight: $(window).height() - 52,
            baseLayerList: [config.mapData.baseMap.map, config.mapData.baseMap.note],
            customZIndex: 100000
        });
    };

    //目录勾选父子联动
    function checkLinkage(node) {
        if (node.isParent) {
            node.children.forEach(function (item) {
                if (item.isHidden == true) { return; };
                if (node.checked) {
                    item.checked = true;
                } else {
                    item.checked = false;
                }
                treeObj.updateNode(item);
            });
        } else {
            var nodeArr = [], visibleNodeArr = [];
            var pNode = node.getParentNode();
            pNode.children.forEach(function (item) {
                if (item.isHidden == false) {
                    visibleNodeArr.push(item);
                }
                if (item.checked) {
                    nodeArr.push(item);
                }
            });
            if (nodeArr.length == visibleNodeArr.length) {
                pNode.checked = true;
            } else {
                pNode.checked = false;
            }
            treeObj.updateNode(pNode);
        }
    };
    //通过图层名获取图层
    function getLayerByName(layerName) {
        //var maplayers = mapCtlExt.map.getLayers().getArray();
        var maplayers = getMaplayers();
        var temp = null;
        maplayers.forEach(function (layer) {
            if (layer.get("name") == layerName) {
                temp = layer;
            }
        });
        return temp;
    };
    //点击父级checkbox获取子级名称
    //function getChildrenNodeName(node) {
    //    var layerName = "";
    //    if (node.isParent) {
    //        if (node.children.length == 0) { return; };
    //        node.children.forEach(function (childNode) {
    //            layerName = childNode.label;
    //        });
    //    }
    //    return layerName;
    //};
    //勾选图层事件
    function checkedNodeAddLayer(node, server) {
        var zIndex = node.layerIndex * 10;//图层层级
        var layerName = node.label;
        if (node.checked == false) {
            var layer = getLayerByName(layerName);
            if (!!layer) {
                layer.setVisible(false);
            }
        }
        else {
            var extent = null;
            if (node.range != null && node.range.west != null && node.range.south != null && node.range.east != null && node.range.north != null) {
                extent = [parseFloat(node.range.west), parseFloat(node.range.south), parseFloat(node.range.east), parseFloat(node.range.north)];
            }
            var layer = getLayerByName(layerName);
            if (node.serverList != null && node.serverList.length > 0) {
                var _server = server ? server : node.serverList[0];//默认选择第一个类型服务显示图层
                if (_server.WEST != null && _server.SOUTH != null && _server.EAST != null && _server.NORTH != null) {
                    extent = [parseFloat(_server.WEST), parseFloat(_server.SOUTH), parseFloat(_server.EAST), parseFloat(_server.NORTH)];
                };
                if (_server.SERVERTYPE == "iTelluro") {
                    var dataServerKey = _server.LAYER;
                    var url = _server.URL;
                    var tileSize = 512;//_server.TILESIZE;
                    var zeroLevelSize = _server.ZEROSIZE ? parseFloat(_server.ZEROSIZE) : 36;
                    mapCtlExt.loadCustomLayerByiTelluro(layer, dataServerKey, url, tileSize, zeroLevelSize, layerName, zIndex);
                }
                else if (_server.SERVERTYPE == "WMTS") {
                    var dataServerKey = _server.LAYER;
                    var url = _server.URL;
                    var tileSize = parseInt(_server.TILESIZE);
                    var tileMatrixSet = _server.MATRIXSET;
                    var tileMatrixid = _server.MATRIXIDS;
                    var format = _server.FORMAT;
                    var zoomlevel = _server.LEVEL;
                    mapCtlExt.loadCustomLayerByWMTS(layer, dataServerKey, url, tileMatrixSet, tileMatrixid, format, zoomlevel, tileSize, layerName, extent, zIndex);
                }
                else if (_server.SERVERTYPE == "WMS") {
                    var dataServerKey = _server.LAYER;
                    var url = _server.URL;
                    var sld = null;
                    var format = _server.FORMAT;
                    mapCtlExt.loadCustomLayerByWMS(layer, url, sld, format, dataServerKey, layerName, zIndex);
                }
                else {
                    //_server.SERVERTYPE为业务数据服务类型时
                    businessNodeCheckedEvent();
                }
            }
        }
    };

    /// <summary>
    /// 根据比例尺计算最佳瓦片级数
    /// </summary>
    /// <param name="scale">比例尺分母</param>
    /// <param name="zeroLevelSize">零级大小，单位度</param>
    /// <param name="radius">地球半径，单位米</param>
    /// <param name="dpi">出图分辨率，计算级数时原则上用96即可，但是为了更清晰，这里用出图分辨率</param>
    /// <returns>瓦片级数,若没有找到，返回-1</returns>
    function GetTileLevel(scale, zeroLevelSize, radius, dpi) {
        var Rate = 25.4;//英寸到毫米的换算比值
        var resolation1 = radius * 2 * Math.PI * zeroLevelSize / 360 / 512;//影像的地面分辨率
        var realres = scale / dpi * Rate / 1000;//计算方法可参看GetRealScale(double resolation)函数
        if (realres >= resolation1) {
            return 0;
        }
        //下一级分辨率比上一级小一半
        //实际分辨率落在两个级别之间时返回
        for (var level = 1; level < 20; level++) {
            if (realres < resolation1 && realres * 2 >= resolation1) {
                return level;
            }

            resolation1 = resolation1 / 2;
        }
        return -1;
    }

    /// <summary>
    /// 根据出图比例尺，计算出图时视点高度
    /// </summary>
    /// <param name="rad">地球半径</param>   需传入 6378137
    /// <param name="scale">出图比例尺分母</param>
    function CalcExportAlt(rad, scale) {
        var level = GetTileLevel(scale, 36, rad, 300);
        if (level < 0) {
            return null;
        }
        var alt = 0;
        switch (level) {
            case 0: alt = 10343500; break;
            case 1: alt = 4517100; break;
            case 2: alt = 2687300; break;
            case 3: alt = 569200; break;
            case 4: alt = 548535; break;
            case 5: alt = 236155; break;
            case 6: alt = 95589; break;
            case 7: alt = 41744; break;

                //case 8: alt = 6353950.382344228; break;
                //case 9: alt = 2825081.716713299; break;
                //case 10: alt = 1883758.5083324113; break;
                //case 11: alt = 639263.436426647; break;
                //case 12: alt = 487916.1363974924; break;
                //case 13: alt = 284236.72731885425; break;
                //case 14: alt = 189534.02639412656; break;
                //case 15: alt = 64331.096740367175; break;
                //case 16: alt = 28613.642442431865; break;
                //case 17: alt = 19086.073273235845; break;
                //case 18: alt = 5672.443506736885; break;

            case 8: alt = 24671; break;
            case 9: alt = 12335; break;
            case 10: alt = 6167; break;
            case 11: alt = 3984; break;
            case 12: alt = 1992; break;
            case 13: alt = 1173; break;
            case 14: alt = 770; break;
            case 15: alt = 385; break;
            case 16: alt = 192; break;
            case 17: alt = 96; break;
            case 18: alt = 48; break;
            case 19: alt = 24; break;
            default:
                return null;
        }
        return alt;
    };
    //获取表单数据
    function getFormData() {
        var DrawingName = $("#drawing_name").val();//制图名称
        var Scale = $("#SCtype").attr("data-value");//比例尺
        var East = parseFloat($("#longitude_E").val());//东
        var North = parseFloat($("#latitude_N").val());//北
        var South = parseFloat($("#latitude_S").val());//南
        var West = parseFloat($("#longitude_W").val());//西
        var IsBasicTF = $("#formart-check").prop("checked");//是否是标准图幅
        var drawingData = { "DrawingName": DrawingName, "Scale": Scale, "East": East, "North": North, "South": South, "West": West, "IsBasicTF": IsBasicTF };
        return drawingData;
    };
    //向子iframe传递iframeId以便子iframe获取图层数据
    var _GUId, _iframeId;
    if (window.top.length > 0) {
        _GUId = $(window.top.document.getElementsByClassName("page-tabs-content")).find("a.active").attr("data-value");
        _iframeId = "iframe" + _GUId;
    } else {
        _iframeId = "_blank";
    };
    //出图数据弹框
    function setChutuData() {
        learun.dialogOpen({
            id: "ChutuForm",
            title: ['<i class="fa fa-cloud-upload"></i>&nbsp;出图图层数据<span id=' + _iframeId + '></span>', 'text-align:left;color:black;'],
            url: '/DrawingOutputManage/DrawingOutput/plotForm',
            width: "900px",
            height: "500px",
            isClose: true,
            callBack: function (iframeId) {
                chutuData = getInfoTop().frames[iframeId].AcceptClick();
                //console.log("130", chutuData);
            }
        });
    };
    //制图参数弹框
    function setZhituData() {
        learun.dialogOpen({
            id: "ZhituForm",
            title: ['<i class="fa fa-cloud-upload"></i>&nbsp;制图参数设置<span id=' + _iframeId + '></span>', 'text-align:left;color:black;'],
            url: '/DrawingOutputManage/DrawingOutput/drawingForm',
            width: "900px",
            height: "500px",
            isClose: true,
            callBack: function (iframeId) {
                zhituData = getInfoTop().frames[iframeId].AcceptClick();
                //console.log("145", zhituData);
            }
        });
    };
    //制图输出历史列表弹框
    function getHistoryList() {
        learun.dialogOpen({
            id: "HistoryList",
            title: ['<i class="fa fa-cloud-download"></i>&nbsp;制图输出历史列表', 'text-align:left;color:black;'],
            url: '/DrawingOutputManage/DrawingOutput/historyList',
            width: "1200px",
            height: "650px",
            btn: null
        });
    };
    //图层数据
    function getMaplayers() {
        var _maplayers = mapCtlExt.getMap().getLayers().getArray();
        return _maplayers;
    };
    //图层树已选节点
    function checkedLayers() {
        var layers = [];
        var layerNodes = treeObj.getCheckedNodes(true);
        //console.log('Debug:  layerNodes ', layerNodes);
        layerNodes.forEach(function (node) {
            var layer = null, server = null;
            if (node.isParent == false) {
                var _servers = node.serverList;
                if (!_servers || _servers.length <= 0) { return; };
                for (var i = 0; i < _servers.length; i++) {
                    var server = _servers[i];
                    if (!server.SERVERTYPE) { return; };
                    if (server.SERVERTYPE == "iTelluro") {
                        layer = { layerTyep: server.SERVERTYPE, layerName: node.label, dataserverkey: server.LAYER, url: server.URL, zerolevelsize: server.ZEROSIZE, tilesize: 512, zoomlevel: null, opacity: 0.6 };
                        layers.push(layer);
                        return;
                    } else if (server.SERVERTYPE == "WMTS") {
                        var _tileSize = server.TILESIZE ? parseInt(server.TILESIZE) : null;
                        layer = { layerTyep: server.SERVERTYPE, layerName: node.label, dataserverkey: server.LAYER, url: server.URL, formart: server.FORMAT, matrixset: server.MATRIXSET, zerolevelsize: null, zoomlevel: server.LEVEL, tilesize: _tileSize, opacity: 0.6 };
                        layers.push(layer);
                        return;
                    } else if (server.SERVERTYPE == "WMS") {
                        layer = { layerTyep: server.SERVERTYPE, layerName: node.label, dataserverkey: server.LAYER, url: server.URL, zerolevelsize: server.ZEROSIZE, tilesize: server.TILESIZE, zoomlevel: null, opacity: 0.6 };
                        layers.push(layer);
                        return;
                    };
                };
            };
        });
        //console.log('Debug:  layers ', layers)
        return layers;
    };
    //根据服务类型找到serverList中对应的服务
    //function getServerByType(serverList, serverType) {
    //    var _server = null;
    //    serverList.forEach(function (serverItem,index) {
    //        if (serverItem.SERVERTYPE == serverType) {
    //            _server = serverItem;
    //        }
    //    });
    //    return _server;
    //};
    //根据勾选状态选择功能
    function ListenCheck(checkObj, activeObj, mengObj, siblingsObj) {
        checkObj.change(function () {
            var isChecked = $(this).prop("checked");
            if (isChecked) {
                activeObj.find("input").removeAttr("disabled");
                activeObj.find("button").removeAttr("disabled");
                mengObj.find("input").attr("disabled", "disabled");
                mengObj.find("button").attr("disabled", "disabled");
                siblingsObj.prop("checked", false);
            } else {
                mengObj.find("input").removeAttr("disabled");
                mengObj.find("button").removeAttr("disabled");
                activeObj.find("input").attr("disabled", "disabled");
                activeObj.find("button").attr("disabled", "disabled");
                siblingsObj.prop("checked", true);
            }
        });
    };
    //拾取点
    var isGetPoint = false;
    function getClickCoord() {
        isGetPoint = true;
        mapCtlExt.getMap().on("click", function (evt) {
            if (isGetPoint) {
                var Coordinate = evt.coordinate;
                $("#f_longitude").val(Coordinate[0]);
                $("#f_latitude").val(Coordinate[1]);
            }
        });
    };
    //根据经纬度,比例尺计算标准图幅号
    function calculateFormart() {
        isGetPoint = false;
        var f_longitude = parseFloat($("#f_longitude").val());
        var f_latitude = parseFloat($("#f_latitude").val());
        var f_scale = parseInt($("#SCtype").attr("data-value"));
        var mapCode = "";
        if (!f_longitude || !f_latitude || !f_scale) { return; };
        $.ajax({
            url: "../../DrawingOutputManage/DrawingOutput/GetMapCode?lon=" + f_longitude + "&lat=" + f_latitude + "&scale=" + f_scale,
            type: "get",
            async: false,
            success: function (data) {
                mapCode = data;
                $("#formart_num").val(data);
            }
        });
        //console.log('mapCode:  data ', mapCode);
        getFormartArea(mapCode);
    };
    //根据标准图幅获取范围
    function getFormartArea(mapcode) {
        if (!mapcode) { return; };
        var areaData = null;
        $.ajax({
            url: "../../DrawingOutputManage/DrawingOutput/GetMapRangeByMapCode?mapcode=" + mapcode,
            type: "get",
            dataType: "json",
            async: false,
            success: function (data) {
                areaData = data;
                $("#latitude_N").val(data.North);
                $("#latitude_S").val(data.South);
                $("#longitude_W").val(data.West);
                $("#longitude_E").val(data.East);
                var LongitudeTf = Number((data.East + data.West) / 2);
                var LatitudeTf = Number((data.North + data.South) / 2);
                mapCtlExt.getMap().getView().animate({ center: [LongitudeTf, LatitudeTf], duration: 1500 });
                var polyWkt = "POLYGON((" + data.West + " " + data.North + "," + data.East + " " + data.North + "," + data.East + " " + data.South + "," + data.West + " " + data.South + "," + data.West + " " + data.North + "))";
                mapCtlExt.drawCustomPolygon(polyWkt);
            }
        });
        return areaData;
    };
    //计算标准图幅的邻接图幅号
    function getNeighbour(mapcode) {
        if (!mapcode) { return; };
        var mapcodes = null;
        $.ajax({
            url: "../../DrawingOutputManage/DrawingOutput/GetNeighbour?mapcode=" + mapcode,
            type: "get",
            dataType: "json",
            async: false,
            success: function (data) {
                mapcodes = data;
            }
        });
        return mapcodes;
    };
    //移动范围事件
    function changeArea(direction) {
        var _mapcode = $("#formart_num").val();
        if (!_mapcode) { return; };
        var mapcodes = getNeighbour(_mapcode);
        var mapCode = "";
        if (direction == 1) {
            mapCode = mapcodes[1];
        } else if (direction == 2) {
            mapCode = mapcodes[5];
        } else if (direction == 3) {
            mapCode = mapcodes[7];
        } else if (direction == 4) {
            mapCode = mapcodes[3];
        };
        $("#formart_num").val(mapCode);
        var _area = getFormartArea(mapCode);
        var LongitudeTf = Number((_area.East + _area.West) / 2);
        var LatitudeTf = Number((_area.North + _area.South) / 2);
        mapCtlExt.getMap().getView().animate({ center: [LongitudeTf, LatitudeTf], duration: 1500 });
    };
    //获取地图上自定义feature
    function getCustomFeatures() {
        var resultFeatures = mapCtlExt.getFeatrues();
        var featureList = [];
        resultFeatures.forEach(function (feature) {
            var shape = { PolyType: feature.GeoType, FillColorExt: feature.FillColor, LineColorExt: feature.LineColor, LineWidth: feature.LineWidth, Fill: true, Outline: true };
            if (feature.GeoType == "Circle") {
                var coordinate = feature.Coordinates;
                shape.Center = { X: parseFloat(coordinate.split(',')[1]), Y: parseFloat(coordinate.split(',')[2].split('"')[0]) };
                shape.Radius = parseFloat(coordinate.split(',')[0].split('"')[0]);
            } else {
                shape.PolyWKT = feature.Coordinates;
            };
            featureList.push(shape);
        });
        return featureList;
    };
    //图例
    function getLegends(legends) {
        var _lis = function () {
            var _li = "";
            for (var i in legends) {
                if (legends[i].url) {
                    _li += '<li class="showmygdt_xx"><img class="img1" src="' + legends[i].url + '"/><p>图例' + i + '1</p></li>';
                }
            };
            return _li;
        };
        var _html = '<div id="legend_ul" class="mygdt">' +
                        '<div id="mygdt_gb" class="mygdt_gb"><i class="fa fa-times"></i></div>' +
                        '<p class="p1">图例</p>' +
                        '<ul class="mygdt_gb_ul">' + _lis() + '</ul>' +
                        '<div class="mygdt_xx picview" id="picview">' +
                            '<div id="mygdtxx_gb" class="mygdtxx_gb"><i class="fa fa-reply-all"></i>返回</div>' +
                            '<img class="img2 " name="viewArea" id="viewArea" draggable="false" src="#" />' +
                        '</div>' +
                    '</div>';
        $('#legend_ul').remove();
        $(".center-Panel").append(_html);
        $('#mygdt_gb').click(function () {
            $(".mygdt").hide();
        });
        $('#mygdtxx_gb').click(function () {
            $(".mygdt").css({ "width": "100px" });
            $(".mygdt_gb_ul").show();
            $(".mygdt_xx").hide();
        });
        $('.showmygdt_xx').click(function (e) {
            $(".mygdt").css({ "width": "364px" });
            $(".mygdt_xx").show();
            $(".mygdt_gb_ul").hide();
            $(".mygdt_xx .img2").css({ "width": "300px", "height": "auto", "top": "50px", "left": "10px" });
            var imgurl = e.target.src;
            $(".mygdt_xx .img2").attr("src", imgurl);
            //$('#viewArea').zoomMarker({
            //    src: imgurl,
            //    rate: 0.2,
            //    width: 400,
            //    min: 400
            //});
        });
    };
    //服务列表
    function getLayerServerList(node) {
        var _index = node.currentLayerIndex ? node.currentLayerIndex : 0;
        var listHtml = function () {
            var list = function () {
                var listStr = "";
                for (var i in node.serverList) {
                    if (node.serverList[i].SERVERTYPE) {
                        var ac = i == _index ? 'dd-active' : '';
                        var _dl = '<dl order="' + i + '" name="changeServerinfo">' +
                                      '<dt class="' + ac + '"><img class="dt-img" src="/Content/images/' + node.serverList[i].SERVERTYPE + '.png" /></dt>' +
                                      '<dd style="padding-top:10px;"><p>' + node.serverList[i].SERVERTYPE + '</p></dd>' +
                                  '</dl>';
                        listStr += _dl;
                    }
                };
                return listStr;
            };
            var listWrap = '<div class="server-address-list" style="position:absolute;display:none;">' +
                               '<div style="border-bottom:1px solid #e5e5e5;padding:10px;text-align:center;position:relative;">' +
                                   '<span>服务列表</span><a id="closeRightWin" href="javascript:;" style="position:absolute;top:0;right:4px;"><i class="fa fa-times"></i></a>' +
                               '</div>' +
                               '<div style="padding:10px; overflow-x:scroll; white-space:nowrap; max-width:400px;">' + list() + '</div>' +
                           '</div>';
            return listWrap;
        };
        var _html = '<div id="server-address">' +
                        '<div class="server-address" style="bottom: 150px; right: 15px; position: fixed">' +
                            '<div id="isShowRightWin" class="r-left" data-toggle="tooltip" data-placement="bottom" tooltip="服务列表"><i class="ti-view-grid"></i></div>' +
                            listHtml() +
                        '</div>' +
                        '<div class="righttag" id="serverDetail"></div>' +
                    '</div>';
        $('#server-address').remove();
        $(".center-Panel").append(_html);
        getServerDetail(node.serverList[_index]);
        $("#serverDetail").draggable({ handle: "div.panel-heading" });
        $("#isShowRightWin").click(function (e) {
            if ($(this).hasClass('active-show-btn')) {
                $(this).removeClass('active-show-btn');
                $(this).siblings(".server-address-list").hide();
            } else {
                $(this).addClass('active-show-btn');
                $(this).siblings(".server-address-list").show().css("left", -($(".server-address-list").width() + 5));
            }
        });
        //绑定切换服务事件
        $("dl[name=changeServerinfo]").click(function () {
            var servers = node.serverList;
            var prevOrder = parseInt($("dl[name=changeServerinfo]").find('.dd-active').parent().attr('order'));
            $(this).find('dt').addClass('dd-active');
            $(this).siblings("dl").find('dt').removeClass('dd-active');
            var currentOrder = parseInt($(this).attr('order'));
            node.currentLayerIndex = currentOrder;
            changeServerinfo(node, currentOrder);
            changeLayerByServer(node, prevOrder, currentOrder);
        });
        //列表关闭
        $('#closeRightWin').click(function (e) {
            $(this).parents('.server-address-list').hide();
            $('#isShowRightWin').removeClass('active-show-btn');
        });
    };
    //同一节点不同服务图层之间切换
    function changeLayerByServer(node, prevOrder, currentOrder) {
        var servers = node.serverList;
        if (servers.length == 1) { return; };
        var prevServerName = node.label;
        var prevLayer = getLayerByName(prevServerName);
        if (prevLayer) {
            mapCtlExt.getMap().removeLayer(prevLayer);
        };
        checkedNodeAddLayer(node, servers[currentOrder]);
        initTopTools(node, currentOrder);
    };
    //服务详情
    function getServerDetail(server) {
        var serverParams = setServerParam(server);
        function detail() {
            var _URL = server.URL ? server.URL : '';
            var _SERVERDESC = server.SERVERDESC ? server.SERVERDESC : '';
            var _REQUESTTYPE = server.REQUESTTYPE ? server.REQUESTTYPE : '';
            var _detail = '<p style="margin: 5px 0; white-space: normal; word-wrap: break-word;">' +
                              '<span class="font-title-little">接口地址：</span>' +
                              '<span class="font-content-small">' + _URL + '</span>' +
                          '</p>' +
                          '<p style="margin: 5px 0; white-space: normal; word-wrap: break-word;">' +
                              '<span class="font-title-little">接口描述：</span>' +
                              '<span class="font-content-small">' + _SERVERDESC + '</span>' +
                          '</p>' +
                          '<p style="margin: 5px 0; white-space: normal; word-wrap: break-word;">' +
                              '<span class="font-title-little">请求方法：</span>' +
                              '<span class="font-content-small">' + _REQUESTTYPE + '</span>' +
                          '</p>';
            return _detail;
        };
        function paramtable() {
            var _trs = "", _table = "";
            for (var i in serverParams) {
                if (serverParams[i].name) {
                    var _value = serverParams[i].value ? serverParams[i].value : "";
                    var _isRequired = serverParams[i].isRequired ? serverParams[i].isRequired : "";
                    var _description = serverParams[i].description ? serverParams[i].description : "";
                    var _tr = '<tr class="tableTitle">' +
                                  '<td>' + serverParams[i].name + '</td>' +
                                  '<td style="word-wrap:break-word;">' + _value + '</td>' +
                                  '<td>' + _isRequired + '</td>' +
                                  '<td>' + _description + '</td>' +
                              '</tr>';
                    _trs += _tr;
                }
            };
            _table = '<table class="font-content-small" border=1 style="width: 100%;table-layout: fixed;">' +
                         '<tr class="tableTitle"><th>参数名</th><th>参数值</th><th>必填</th><th>描述</th></tr>' +
                         _trs +
                     '</table>';
            return _table;
        };
        var _html = '<div class="r-right">' +
                        '<div class="panel-heading border-bottom" style="cursor: move">' +
                            '<span id="SERVERTYPE" class="font-title-middle">服务信息</span>' +
                            '<a id="closeServerDetail" href="javascript:;" style="color: #8e8e93;font-size: 14px; float: right;"><i class="fa fa-times"></i></a>' +
                        '</div>' +
                        '<div class="panel-fixed" style="height: 284px;">' +
                            '<div class="seviceDataShow">' +
                                '<div class="seviceDataContent">' +
                                    detail() +
                                    '<p style="margin: 0 0 5px;"><span class="font-title-little">请求参数：</span></p>' +
                                    paramtable() +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                    '</div>';
        $("#serverDetail").html(_html);
        //详情关闭
        $('#closeServerDetail').click(function (e) {
            $('#serverDetail').hide();
        });
    };
    //服务详情切换
    function changeServerinfo(node, order) {
        $('#serverDetail').show();
        var _server = node.serverList[order];
        getServerDetail(_server);
    };
    //获取当前显示的图层服务
    //function getCurrentLayerServer(node, index) {
    //    var _server = null;
    //    node.serverList.forEach(function (serverItem) {
    //        if (serverItem.ACTIVEINDEX == index) {
    //            _server = serverItem;
    //        }
    //    });
    //    return _server;
    //};
    //设置服务详情参数
    function setServerParam(server) {
        var isUAV = server.SERVERTYPE == '无人机数据';
        var serverDescs = {
            EAST: isUAV ? '中心点经度' : '东经',
            FORMAT: '格式',
            LAYER: '图层信息',
            LEVEL: '总级数',
            MATRIXIDS: '矩阵id集合',
            MATRIXSET: '矩阵集名称',
            NORTH: isUAV ? '中心点纬度' : '北纬',
            RESOLUTIONS: '分辨率集合',
            SERVERTYPE: '服务类型',
            SOUTH: '南纬',
            SRSNAME: '空间参考',
            TILESIZE: '切片大小',
            URL: '服务地址',
            WEST: isUAV ? '中心点高程' : '西经',
            ZEROSIZE: '0级大小'
        };
        //设置服务类型参数
        function setServer(server) {
            var temp = new Array;
            for (var i in server) {
                if (i != 'DIRECTORYINFOGUID' && i != 'GUID' && i != 'URL' && i != 'SERVERNAME') {
                    if (!!server[i] && server[i].length > 0) {
                        var obj = new Object;
                        obj.name = i;
                        obj.value = server[i];
                        obj.isRequired = i == 'SERVERTYPE';
                        obj.isRequired = obj.isRequired ? '是' : '否';
                        obj.description = '';
                        for (var s in serverDescs) {
                            if (s == i) {
                                obj.description = serverDescs[s];
                                break;
                            }
                        }
                        //无人机数据
                        if (isUAV) {
                            if (i == 'EAST') obj.name = 'LON';
                            if (i == 'NORTH') obj.name = 'LAT';
                            if (i == 'WEST') obj.name = 'HEIGHT';
                        }
                        temp.push(obj);
                    }
                }
            }
            return temp;
        }
        return setServer(server);
    };
    //顶部工具条
    function initTopTools(node, index) {
        var _html = '<div class="tools-group" style="position:absolute;top:48px;width:506px;">' +
                        '<div class="btn-group" role="group">' +
                            '<button type="button" id="dingwei99" class="btn btn-default">' +
                                '<span class="map-icon map-editor-icon-3"></span>' +
                                '<span>定位</span>' +
                            '</button>' +
                            '<button type="button" id="sansuo99" class="btn btn-default">' +
                                '<span class="map-icon fa fa-bolt"></span>' +
                                '<span>闪烁</span>' +
                            '</button>' +
                            '<button type="button" id="tmdtz99" class="btn btn-default">' +
                                '<span class="map-icon map-editor-icon-2"></span>' +
                                '<span>透明度调整</span>' +
                            '</button>' +
                            '<button type="button" id="dianxuan99" class="btn btn-default">' +
                                '<span class="map-icon map-editor-icon-uniE906"></span>' +
                                '<span>点选</span>' +
                            '</button>' +
                            '<button type="button" id="kuangxuan99" class="btn btn-default">' +
                                '<span class="map-icon map-editor-icon-22"></span>' +
                                '<span>框选</span>' +
                            '</button>' +
                            '<button type="button" id="qingchu99" class="btn btn-default">' +
                                '<span class="map-icon map-editor-icon-1"></span>' +
                                '<span>清除</span>' +
                            '</button>' +
                            '<button type="button" id="guanbi99" class="btn btn-default">' +
                                '<span class="map-icon map-editor-icon--01"></span>' +
                                '<span>关闭</span>' +
                            '</button>' +
                            '<div id="tmdtz_val99" class="tmdtz_val" style="width:506px;">' +
                                '<input id="single-slider99" type="hidden" class="single-slider" value="1" />' +
                            '</div>' +
                        '</div>' +
                    '</div>';
        $('.tools-group').remove();
        $(".center-Panel").append(_html);
        $('.tools-group').css("top", $("#mapControl").offset().top + 3);
        if (node.IsSpatalQuery == 1) {
            $("#dianxuan99,#kuangxuan99").show();
            $(".tools-group").css({ "width": "506px", "left": "50%", "margin-left": "-253px" });
            $("#tmdtz_val99").css("width", "506px");
        } else {
            $("#dianxuan99,#kuangxuan99").hide();
            $(".tools-group").css({ "width": "372px", "left": "50%", "margin-left": "-186px" });
            $("#tmdtz_val99").css("width", "372px");
        };
        //获取当前服务的图层
        var _server = node.serverList[index];
        var _layerName = node.label;
        var _layer = getLayerByName(_layerName);
        //定位
        $('#dingwei99').click(function () {
            tmdtzHide();
            if (node.range && node.range.east) {
                mapCtlExt.moveToAreaAtCenter(node.range);
            }
            else {
                learun.dialogAlert({ msg: "该图层缺少位置信息！", type: -1 });
            };
        });
        //闪烁
        $('#sansuo99').click(function () {
            tmdtzHide();
            mapCtlExt.flickerLayer(_layer);
        });
        //透明度调整
        $('#tmdtz99').click(function () {
            var self = $(this);
            if (self.hasClass('top-op-active')) {
                self.removeClass('top-op-active');
                $("#tmdtz_val99").slideUp();
            } else {
                self.siblings().removeClass('top-op-active');
                self.addClass('top-op-active');
                $("#tmdtz_val99").slideDown();
            };
            $('#single-slider99').jRange({
                from: 0,
                to: 1,
                step: 0.1,
                scale: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],
                format: '%s',
                width: 300,
                theme: 'theme-blue',
                showLabels: true,
                showScale: true,
                onstatechange: function () {
                    var v = parseFloat($('#single-slider99').val());
                    if (_layer) {
                        _layer.setOpacity(v);
                    }
                }
            });
            var _opacity = _layer ? _layer.getOpacity() : 1;
            $('#single-slider99').jRange('setValue', _opacity);
        });
        //点选
        $('#dianxuan99').click(function () {
            tmdtzHide();
            mapCtlExt.customDraw("Point", function (feature, drawTool) {
                var extent = feature.getGeometry().getExtent();
                console.log('Debug:  点选 ', extent);
                var _extent = [extent[0], extent[1], extent[2] - 0.01, extent[3] - 0.01];//容差构建成一个正方形区域
                queryContent(_server, _extent);
                //移除之前的绘制对象，结束绘制
                mapCtlExt.getMap().removeInteraction(drawTool);
            });
        });
        //框选
        $('#kuangxuan99').click(function () {
            tmdtzHide();
            mapCtlExt.customDraw("Box", function (feature, drawTool) {
                var extent = feature.getGeometry().getExtent();
                console.log('Debug:  框选 ', extent);
                queryContent(_server, extent);
                //移除之前的绘制对象，结束绘制
                mapCtlExt.getMap().removeInteraction(drawTool);
            });
        });
        //清除
        $('#qingchu99').click(function () {
            $("#spatial_query_html").hide();
            tmdtzHide();
            mapCtlExt.clearRectLayer();
            mapCtlExt.hideTip();
        });
        //关闭
        $('#guanbi99').click(function () {
            $(".tools-group").hide();
            $("#spatial_query_html").hide();
            tmdtzHide();
            mapCtlExt.clearRectLayer();
            mapCtlExt.hideTip();
        });
        //隐藏透明度设置条
        function tmdtzHide() {
            $("#tmdtz_val99").hide();
            $(".tools-group").find(".btn-default").removeClass('top-op-active');
        };
    };
    //顶部点选框选查询空间数据
    function queryContent(server, extent) {
        var serveType = server.SERVERTYPE;
        var maxlon = Math.max(extent[0], extent[2]);
        var maxlat = Math.max(extent[1], extent[3]);
        var minlon = Math.min(extent[0], extent[2]);
        var minlat = Math.min(extent[1], extent[3]);
        var url = '';
        if (serveType == "WMS") {
            url = server.URL + '?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image%2Fpng&TRANSPARENT=true&QUERY_LAYERS=' + server.LAYER + '&STYLES&LAYERS=' + server.LAYER + '&INFO_FORMAT=text%2Fhtml&FEATURE_COUNT=50&X=0&Y=0&SRS=EPSG%3A4326&WIDTH=1&HEIGHT=1&BBOX=' + minlon + '%2C' + minlat + '%2C' + maxlon + '%2C' + maxlat + '%2C';
        };
        if (serveType == "WFS") {
            // url = `http://geo.infoearth.com:8080/geoserver/gisdatamanage/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=gisdatamanage:vhbtws_wt27174028&maxFeatures=50&outputFormat=application%2Fjson&CQL_FILTER=BBOX(geom,${minlon},${minlat},${maxlon},${maxlat})`;
            url = server.URL + '?service=WFS&version=1.0.0&request=GetFeature&typeName=' + server.LAYER + '&maxFeatures=50&outputFormat=application%2Fjson&CQL_FILTER=BBOX(geom,' + minlon + ',' + minlat + ',' + maxlon + ',' + maxlat + ')';
        };
        //var queryData = null;
        if (url.indexOf('http') != -1) {
            //请求数据
            $.ajax({
                url: url,
                type: 'GET',
                data: {}
            }).done(function (result) {
                console.log("query spatial success");
                if (result) {
                    console.log('Debug:   result', result);
                    var queryTimer = setInterval(function () {
                        if (result) {
                            clearInterval(queryTimer);
                            //setContent(server.SERVERTYPE, queryData);
                            setContent(server.SERVERTYPE, result);
                        };
                    }, 300);
                }
            }).fail(function (err) {
                console.log("query spatial error");
                console.log("err");
            }).always(function () {
                console.log("complete");
            });
        } else {
            learun.dialogAlert({ msg: "请选择WMS或者WFS服务！", type: -1 });
        };


    };
    //根据空间数据渲染弹框
    function setContent(type, data) {
        var queryData = data;
        var _html = '<div id="spatial_query_html">' +
                        '<div style="position:relative;">' +
                            '<h4 style="padding: 10px 0;text-align:center;border-bottom: 1px solid #ccc;">--- 空间查询信息 ---</h4>' +
                            '<a href="javascript:;" id="sq_toggleQuery" style="position: absolute;right: 20px;top:11px;"><i class="fa fa-chevron-down" style="transition: all .3s;"></i></a>' +
                            '<a href="javascript:;" id="sq_close" style="position: absolute;right:5px;top:11px;"><i class="fa fa-times" style="transition: all .3s;"></i></a>' +
                        '</div>' +
                        '<div id="spatial_query"></div>' +
                    '</div>';
        $("#spatial_query_html").remove();
        $(".center-Panel").append(_html);
        var HTML = "";
        if (type == 'WMS') { HTML = queryData; };
        if (type == 'WFS') {
            HTML = resultTable(queryData);
        };
        if (!$(HTML).find('.featureInfo') || (typeof (HTML) === "string" && HTML.indexOf('<table class="featureInfo">') == -1)) {
            HTML = '<h5 style="line-height:50px;text-align:center;">暂无信息，换个位置试试！</h5>'
        };
        $("#spatial_query").html(HTML);
        $("#sq_close").click(function () {
            $("#spatial_query_html").hide();
        });
        $("#sq_toggleQuery").click(function () {
            if ($("#spatial_query").is(":visible")) {
                $("#spatial_query").hide();
                $(this).find("i").removeClass("fa-chevron-down").addClass("fa-chevron-up");
            } else {
                $("#spatial_query").show();
                $(this).find("i").removeClass("fa-chevron-up").addClass("fa-chevron-down");
            }
        });
        //生成表格
        function resultTable(queryData) {
            var features = queryData.features;
            // TH
            var getThs = function (properties) {
                var ths = '<th>FID</th>';
                if (properties) {
                    for (var i in properties) {
                        var _th = '<th>' + i + '</th>';
                        ths += _th;
                    }
                }
                return ths;
            };
            // TR
            var getTrs = function (features) {
                var trs = '';
                if (features) {
                    // tr
                    for (var i in features) {
                        var odd = (parseInt(i) + 1) % 2 == 0 ? 'odd' : '';
                        //属性order方便点击事件找到所在数据行
                        var tr = '<tr class="' + odd + '" order="' + i + '">';
                        // td
                        var _td1 = features[i].id ? '<td>' + features[i].id + '</td>' : '';
                        tr += _td1;
                        var _properties = features[i].properties;
                        if (_properties) {
                            for (var j in _properties) {
                                var _td2 = '<td>' + _properties[j] + '</td>';
                                tr += _td2;
                            }
                        };
                        tr += '</tr>';
                        trs += tr;
                    }
                }
                return trs;
            };
            var table = '';
            if (features.length > 0) {
                var ths = getThs(features[0].properties);
                var trs = getTrs(features);
                if (trs.length > 0) {
                    var _name = queryData.crs.properties.name ? queryData.crs.properties.name : "";
                    table = '<table class="featureInfo">' +
                                '<caption class="featureInfo" style="padding:8px 15px;">' + _name + '</caption>' +
                                '<thead>' + ths + '</thead>' +
                                '<tbody>' + trs + '</tbody>' +
                            '</table>'
                };
            };
            return table;
        };
    };

    //请求业务数据
    function getBusinessData() {
        var bData = null;
        //需同步async:false请求数据
        console.log('Debug:   ', "同步async:false请求数据");
        return bData;
        //数据结构为树形结构，可参照treeCreate()方法（id、label、serverList为不可缺少字段）
    };
    //业务数据树节点选择事件
    function businessNodeCheckedEvent() {
        console.log('Debug:   ', "业务数据树节点勾选事件被触发");
    };
</script>
